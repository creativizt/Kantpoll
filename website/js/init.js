/**
 * Kantcoin Project
 * https://kantcoin.org
 */

//jQuery and Materialize configurations

$("#right").sideNav({edge: 'right'});

(function ($) {
    $(function () {
        //initialize all modals
        $('.modal').modal()
        //$('.button-collapse').sideNav()
    }) // end of document ready
})(jQuery) // end of jQuery name space

//To activate menu items when clicked
$("#slide_out1 li").on("click", function() {
    $("#slide_out1 li").removeClass("active")
    $(this).addClass("active")
})

//To render selects inside modals
$(document).ready(function() {
    $('select').material_select()
})

//Initializing the materialize tabs
$(document).ready(function(){
    $('ul.tabs').tabs()
})

//Constants

//Minimum password length
const PASSWORD_LENGTH = 8
//Special strings
const THE_AND = "--and--"
const QUESTION_MARK = "--question--"
const HASHTAG = "--hashtag--"
const QUOTE = "--quote--"
const DOUBLEQUOTE = "--doublequote--"

//Whisper topics
const REGISTER_VOTER = "RGVT"
const VOTE = "VOTE"
const STORE_ENODE = "STEN"

const CAMPAIGN_CONTRACT = [{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"committedStatistics","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"bytes32"},{"name":"isdonationsballot","type":"bool"}],"name":"addBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"commitDonationsStatistics","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"}],"name":"howManyCandidatesInBallot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"person","type":"address"},{"name":"part1","type":"bytes32"},{"name":"part2","type":"bytes32"},{"name":"part3","type":"bytes32"}],"name":"defineWhisper","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"donationRounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"votationRounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"chairperson","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"committed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"howManyGroups","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"preCommit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"}],"name":"getCandidate","outputs":[{"name":"ipfs","type":"bytes32"},{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"iterateCandidatesCounter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"remainingDonationRounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ballots","outputs":[{"name":"id","type":"bytes32"},{"name":"closed","type":"bool"},{"name":"stopped","type":"bool"},{"name":"donations","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"unstopBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"remainingVotationRounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"commitVotation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"howManyBallots","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"toVoter","type":"address"}],"name":"removeRightToVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"person","type":"address"}],"name":"getWhisper","outputs":[{"name":"","type":"bytes32"},{"name":"","type":"bytes32"},{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"},{"name":"category","type":"bytes32"}],"name":"getVotesPerBallotCandidateCategory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"grp","type":"uint256"},{"name":"value","type":"uint256"}],"name":"defineGroupValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"person","type":"address"},{"name":"grp","type":"uint256"}],"name":"defineGroupChairperson","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"},{"name":"first_number","type":"bytes32"},{"name":"the_candidate","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"getVotes","outputs":[{"name":"","type":"bytes32[12]"},{"name":"","type":"uint256[12]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"group","type":"uint256"}],"name":"getGroupVoters","outputs":[{"name":"","type":"address[12]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"groups","outputs":[{"name":"cPerson","type":"address"},{"name":"category","type":"bytes32"},{"name":"value","type":"uint256"},{"name":"size","type":"uint256"},{"name":"closed","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"group","type":"uint256"}],"name":"getGroupPubkeys","outputs":[{"name":"","type":"uint256[12]"},{"name":"","type":"bytes32[12]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"toVoter","type":"address"},{"name":"prefix","type":"uint256"},{"name":"pubkey","type":"bytes32"},{"name":"cash","type":"uint256"}],"name":"giveRightToVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currentVoteMessage","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"position","type":"uint256"},{"name":"ipfs","type":"bytes32"}],"name":"addCandidateIntoBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"stopBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"getConfirmations","outputs":[{"name":"","type":"address[12]"},{"name":"","type":"bool[12]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"mayCommit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"mgz","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"addVoterToGVoters","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"closeBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"grp","type":"uint256"}],"name":"addVoterToGroup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"voter","type":"address"}],"name":"getVoter","outputs":[{"name":"pubkey","type":"bytes32"},{"name":"prefix","type":"uint256"},{"name":"group","type":"uint256"},{"name":"cash","type":"uint256"},{"name":"hasGroup1","type":"bool"},{"name":"hasGroup2","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"defineCurrentBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"commitDonations","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"commitVotationStatistics","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"message","type":"bytes32"}],"name":"defineCurrentVoteMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currentBallot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"cPerson","type":"address"}],"name":"addGroup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"grp","type":"uint256"}],"name":"closeGroup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"grp","type":"uint256"},{"name":"category","type":"bytes32"}],"name":"defineGroupCategory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"position","type":"uint256"},{"name":"ok","type":"bool"}],"name":"confirm","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"vRounds","type":"uint256"},{"name":"dRounds","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"constructor"}]

const CONTRACT_DATA = '0x6060604052604051604080620044e4833981016040528080519060200190919080519060200190919050506001818301101580156100405750600a81830111155b151561004b57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600581905550816007819055508060048190555080600681905550505061442b80620000b96000396000f300606060405260043610610251576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630661d01f146102565780630a1162b01461029a5780630c3f620b146102cc578063103eb2f7146102f85780631dceaf2d1461032f57806320e614a91461038f5780632b1611b5146103b85780632e4176cf146103e15780632fca4f6d14610436578063422f675b1461047a57806344428c60146104a35780634bd46448146104cf5780635182d3f11461051e578063574adce2146105415780635c632b381461056a5780635e59d00a146105ca578063631af71a146105ed578063643eb34f14610616578063656e2a3714610642578063685a9dd81461066b57806372a5a1c7146106a45780637523412b1461071757806376eb1356146107645780637a721d1e146107905780638fbd82ef146107d257806391f366331461081d578063939cf16d146108b457806396324bd414610913578063997338381461099e5780639fdf782414610a2c578063a725f0b214610a84578063a88a74af14610ab5578063b1bb8fdc14610aee578063b485478e14610b11578063b67c27e714610ba8578063c4c1ce4514610bec578063cf921add14610c15578063d045f1e414610c41578063d2e886b014610c64578063d4f50f9814610c87578063d508d79914610d07578063db725c6314610d2a578063dcf0102014610d56578063de655c1514610d82578063f80723a814610da9578063f9515f1b14610dd2578063fe73cf0b14610e0b578063fea234f414610e2e578063ff02a79a14610e5e575b600080fd5b341561026157600080fd5b6102806004808035906020019091908035906020019091905050610e95565b604051808215151515815260200191505060405180910390f35b34156102a557600080fd5b6102ca6004808035600019169060200190919080351515906020019091905050610ed2565b005b34156102d757600080fd5b6102f6600480803590602001909190803590602001909190505061104b565b005b341561030357600080fd5b6103196004808035906020019091905050611370565b6040518082815260200191505060405180910390f35b341561033a57600080fd5b61038d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803560001916906020019091908035600019169060200190919080356000191690602001909190505061138a565b005b341561039a57600080fd5b6103a26114ab565b6040518082815260200191505060405180910390f35b34156103c357600080fd5b6103cb6114b1565b6040518082815260200191505060405180910390f35b34156103ec57600080fd5b6103f46114b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044157600080fd5b61046060048080359060200190919080359060200190919050506114dc565b604051808215151515815260200191505060405180910390f35b341561048557600080fd5b61048d611519565b6040518082815260200191505060405180910390f35b34156104ae57600080fd5b6104cd6004808035906020019091908035906020019091905050611526565b005b34156104da57600080fd5b6104f9600480803590602001909190803590602001909190505061189d565b6040518083600019166000191681526020018281526020019250505060405180910390f35b341561052957600080fd5b61053f60048080359060200190919050506118fb565b005b341561054c57600080fd5b61055461191d565b6040518082815260200191505060405180910390f35b341561057557600080fd5b61058b6004808035906020019091905050611923565b60405180856000191660001916815260200184151515158152602001831515151581526020018215151515815260200194505050505060405180910390f35b34156105d557600080fd5b6105eb6004808035906020019091905050611989565b005b34156105f857600080fd5b610600611a6e565b6040518082815260200191505060405180910390f35b341561062157600080fd5b6106406004808035906020019091908035906020019091905050611a74565b005b341561064d57600080fd5b610655611cfd565b6040518082815260200191505060405180910390f35b341561067657600080fd5b6106a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d0a565b005b34156106af57600080fd5b6106db600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611db0565b60405180846000191660001916815260200183600019166000191681526020018260001916600019168152602001935050505060405180910390f35b341561072257600080fd5b61074e600480803590602001909190803590602001909190803560001916906020019091905050611e8b565b6040518082815260200191505060405180910390f35b341561076f57600080fd5b61078e6004808035906020019091908035906020019091905050611ed5565b005b341561079b57600080fd5b6107d0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611fd3565b005b34156107dd57600080fd5b61081b6004808035906020019091908035906020019091908035906020019091908035600019169060200190919080359060200190919050506120de565b005b341561082857600080fd5b6108476004808035906020019091908035906020019091905050612370565b6040518083600c60200280838360005b83811015610872578082015181840152602081019050610857565b5050505090500182600c60200280838360005b838110156108a0578082015181840152602081019050610885565b505050509050019250505060405180910390f35b34156108bf57600080fd5b6108d56004808035906020019091905050612468565b6040518082600c60200280838360005b838110156109005780820151818401526020810190506108e5565b5050505090500191505060405180910390f35b341561091e57600080fd5b6109346004808035906020019091905050612528565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018560001916600019168152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b34156109a957600080fd5b6109bf600480803590602001909190505061259a565b6040518083600c60200280838360005b838110156109ea5780820151818401526020810190506109cf565b5050505090500182600c60200280838360005b83811015610a185780820151818401526020810190506109fd565b505050509050019250505060405180910390f35b3415610a3757600080fd5b610a82600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080356000191690602001909190803590602001909190505061272a565b005b3415610a8f57600080fd5b610a97612864565b60405180826000191660001916815260200191505060405180910390f35b3415610ac057600080fd5b610aec60048080359060200190919080359060200190919080356000191690602001909190505061286a565b005b3415610af957600080fd5b610b0f600480803590602001909190505061293b565b005b3415610b1c57600080fd5b610b3b6004808035906020019091908035906020019091905050612a20565b6040518083600c60200280838360005b83811015610b66578082015181840152602081019050610b4b565b5050505090500182600c60200280838360005b83811015610b94578082015181840152602081019050610b79565b505050509050019250505060405180910390f35b3415610bb357600080fd5b610bd26004808035906020019091908035906020019091905050612b6f565b604051808215151515815260200191505060405180910390f35b3415610bf757600080fd5b610bff612bac565b6040518082815260200191505060405180910390f35b3415610c2057600080fd5b610c3f6004808035906020019091908035906020019091905050612bb1565b005b3415610c4c57600080fd5b610c626004808035906020019091905050612e08565b005b3415610c6f57600080fd5b610c856004808035906020019091905050612eed565b005b3415610c9257600080fd5b610cbe600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613146565b6040518087600019166000191681526020018681526020018581526020018481526020018315151515815260200182151515158152602001965050505050505060405180910390f35b3415610d1257600080fd5b610d286004808035906020019091905050613310565b005b3415610d3557600080fd5b610d5460048080359060200190919080359060200190919050506133c3565b005b3415610d6157600080fd5b610d8060048080359060200190919080359060200190919050506136ac565b005b3415610d8d57600080fd5b610da7600480803560001916906020019091905050613972565b005b3415610db457600080fd5b610dbc6139db565b6040518082815260200191505060405180910390f35b3415610ddd57600080fd5b610e09600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506139e1565b005b3415610e1657600080fd5b610e2c6004808035906020019091905050613b41565b005b3415610e3957600080fd5b610e5c600480803590602001909190803560001916906020019091905050613d33565b005b3415610e6957600080fd5b610e9360048080359060200190919080359060200190919080351515906020019091905050613e24565b005b60006101116000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2d57600080fd5b8015610f5a576000600654111515610f4457600080fd5b6001600660008282540392505081905550610f7d565b6000600754111515610f6b57600080fd5b60016007600082825403925050819055505b60028054806001018281610f919190614207565b916000526020600020906002020160006080604051908101604052808660001916815260200160001515815260200160001515815260200185151581525090919091506000820151816000019060001916905560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160010160026101000a81548160ff0219169083151502179055505050505050565b60008060008060018581548110151561106057fe5b906000526020600020906005020160040160009054906101000a900460ff1615151561108b57600080fd5b60028681548110151561109a57fe5b906000526020600020906002020160010160009054906101000a900460ff1615156110c457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001868154811015156110ea57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561113e57600080fd5b60028681548110151561114d57fe5b906000526020600020906002020160010160029054906101000a900460ff16151561117757600080fd5b600060018681548110151561118857fe5b9060005260206000209060050201600201541115156111a657600080fd5b6101116000878152602001908152602001600020600086815260200190815260200160002060009054906101000a900460ff161515156111e557600080fd5b6004546001868154811015156111f757fe5b90600052602060002090600502016002015481151561121257fe5b049350600092505b600c83101561132a5760006001026000191661010d600088815260200190815260200160002060008781526020019081526020016000206000858152602001908152602001600020600001546000191614151561131d5761010d6000878152602001908152602001600020600086815260200190815260200160002060008481526020019081526020016000206001015491506001858154811015156112bc57fe5b90600052602060002090600502016001015490508361010c6000888152602001908152602001600020600084815260200190815260200160002060008360001916600019168152602001908152602001600020600082825401925050819055505b828060010193505061121a565b60016101116000888152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b6000600d8260ff8110151561138157fe5b01549050919050565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c457600080fd5b82600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001816000191690555081600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101816000191690555080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201816000191690555050505050565b60045481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061010f6000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600180549050905090565b600080600060018481548110151561153a57fe5b906000526020600020906005020160040160009054906101000a900460ff1615151561156557600080fd5b60028581548110151561157457fe5b906000526020600020906002020160010160009054906101000a900460ff16151561159e57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001858154811015156115c457fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561161857600080fd5b6101106000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615151561165757600080fd5b6000925060009150600090505b600c81101561184957600073ffffffffffffffffffffffffffffffffffffffff1661010e60008781526020019081526020016000206000868152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611747575061010e60008681526020019081526020016000206000858152602001908152602001600020600082815260200190815260200160002060000160149054906101000a900460ff16155b1561175157611896565b60006001026000191661010d60008781526020019081526020016000206000868152602001908152602001600020600083815260200190815260200160002060000154600019161415156117a6576001830192505b600073ffffffffffffffffffffffffffffffffffffffff1661010e60008781526020019081526020016000206000868152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561183c576001820191505b8080600101915050611664565b818314151561185757600080fd5b60016101106000878152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050565b600080600c60008581526020019081526020016000206000848152602001908152602001600020600001549150600c600085815260200190815260200160002060008481526020019081526020016000206001015490509250929050565b6001600d8260ff8110151561190c57fe5b016000828254019250508190555050565b60065481565b60028181548110151561193257fe5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060010160029054906101000a900460ff16905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119e457600080fd5b60055460045401811015156119f857600080fd5b600281815481101515611a0757fe5b906000526020600020906002020160010160009054906101000a900460ff16151515611a3257600080fd5b6000600282815481101515611a4357fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b60075481565b600080600183815481101515611a8657fe5b906000526020600020906005020160040160009054906101000a900460ff16151515611ab157600080fd5b600284815481101515611ac057fe5b906000526020600020906002020160010160009054906101000a900460ff161515611aea57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600184815481101515611b1057fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b6457600080fd5b600284815481101515611b7357fe5b906000526020600020906002020160010160029054906101000a900460ff16151515611b9e57600080fd5b61010f6000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16151515611bdd57600080fd5b600091505b600c821015611cb95760006001026000191661010d6000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000206000015460001916141515611cac5761010d6000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206001015490506001600c60008681526020019081526020016000206000838152602001908152602001600020600101600082825401925050819055505b8180600101925050611be2565b600161010f6000868152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b6000600280549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d6557600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b6000806000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549250925092509193909250565b600061010c60008581526020019081526020016000206000848152602001908152602001600020600083600019166000191681526020019081526020016000205490509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f3057600080fd5b600060045482811515611f3f57fe5b06141515611f4c57600080fd5b6000600183815481101515611f5d57fe5b906000526020600020906005020160030154141515611f7b57600080fd5b6000600183815481101515611f8c57fe5b906000526020600020906005020160020154141515611faa57600080fd5b80600183815481101515611fba57fe5b9060005260206000209060050201600201819055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561202e57600080fd5b60018181548110151561203d57fe5b906000526020600020906005020160040160009054906101000a900460ff1615151561206857600080fd5b6001805490508110151561207b57600080fd5b8160018281548110151561208b57fe5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006001858154811015156120ef57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215a57600080fd5b60018581548110151561216957fe5b906000526020600020906005020160040160009054906101000a900460ff1615151561219457600080fd5b6002868154811015156121a357fe5b906000526020600020906002020160010160009054906101000a900460ff161515156121ce57600080fd5b6002868154811015156121dd57fe5b906000526020600020906002020160010160019054906101000a900460ff1615151561220857600080fd5b600554600454018610151561221c57600080fd5b600c8410151561222b57600080fd5b60006001026000191661010d600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001546000191614151561227e57600080fd5b600090505b600c8110156122e757826000191661010d600088815260200190815260200160002060008781526020019081526020016000206000838152602001908152602001600020600001546000191614156122da57612368565b8080600101915050612283565b8261010d60008881526020019081526020016000206000878152602001908152602001600020600086815260200190815260200160002060000181600019169055508161010d600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600101819055505b505050505050565b612378614239565b612380614265565b612388614239565b612390614265565b60008090505b600c8110156124585761010d600088815260200190815260200160002060008781526020019081526020016000206000828152602001908152602001600020600001548382600c811015156123e757fe5b6020020190600019169081600019168152505061010d600088815260200190815260200160002060008781526020019081526020016000206000828152602001908152602001600020600101548282600c8110151561244257fe5b6020020181815250508080600101915050612396565b8282945094505050509250929050565b61247061428e565b61247861428e565b60008090505b600c81101561251e57600b6000858152602001908152602001600020600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282600c811015156124da57fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061247e565b8192505050919050565b60018181548110151561253757fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b6125a2614265565b6125aa614239565b6125b2614239565b6125ba614265565b60008090505b600c81101561271c5760036000600b6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548382600c8110151561265e57fe5b6020020190600019169081600019168152505060036000600b6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548282600c8110151561270657fe5b60200201818152505080806001019150506125c0565b818394509450505050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561278557600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001816000191690555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555050505050565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c557600080fd5b600060010260001916600c60008581526020019081526020016000206000848152602001908152602001600020600001546000191614151561290657600080fd5b80600c600085815260200190815260200160002060008481526020019081526020016000206000018160001916905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561299657600080fd5b60055460045401811015156129aa57600080fd5b6002818154811015156129b957fe5b906000526020600020906002020160010160009054906101000a900460ff161515156129e457600080fd5b60016002828154811015156129f557fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b612a2861428e565b612a306142cd565b612a3861428e565b612a406142cd565b60008090505b600c811015612b5f5761010e60008881526020019081526020016000206000878152602001908152602001600020600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382600c81101515612ab757fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061010e60008881526020019081526020016000206000878152602001908152602001600020600082815260200190815260200160002060000160149054906101000a900460ff168282600c81101515612b4357fe5b6020020190151590811515815250508080600101915050612a46565b8282945094505050509250929050565b60006101106000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600c81565b600c81101515612bc057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b6000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612c3f57600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154141515612c8f57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515612cea57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160019054906101000a900460ff16151515612d4657600080fd5b33600b6000848152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e6357600080fd5b6005546004540181101515612e7757600080fd5b600281815481101515612e8657fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612eb157600080fd5b6001600282815481101515612ec257fe5b906000526020600020906002020160010160006101000a81548160ff02191690831515021790555050565b600181815481101515612efc57fe5b906000526020600020906005020160040160009054906101000a900460ff16151515612f2757600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16151515612f8357600080fd5b600c600182815481101515612f9457fe5b906000526020600020906005020160030154101515612fb257600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015460018281548110151561300457fe5b90600052602060002090600502016002015414151561302257600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411151561307357600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506001808281548110151561312557fe5b90600052602060002090600502016003016000828254019250508190555050565b600080600080600080600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549550600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549450600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549350600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549250600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169150600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160019054906101000a900460ff16905091939550919395565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561336b57600080fd5b600554600454018110151561337f57600080fd5b60028181548110151561338e57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156133b957600080fd5b8060088190555050565b60008060006001848154811015156133d757fe5b906000526020600020906005020160040160009054906101000a900460ff1615151561340257600080fd5b60028581548110151561341157fe5b906000526020600020906002020160010160009054906101000a900460ff16151561343b57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660018581548110151561346157fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156134b557600080fd5b6002858154811015156134c457fe5b906000526020600020906002020160010160029054906101000a900460ff1615156134ee57600080fd5b60006001858154811015156134ff57fe5b90600052602060002090600502016002015411151561351d57600080fd5b61010f6000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615151561355c57600080fd5b60045460018581548110151561356e57fe5b90600052602060002090600502016002015481151561358957fe5b049250600091505b600c8210156136675760006001026000191661010d600087815260200190815260200160002060008681526020019081526020016000206000848152602001908152602001600020600001546000191614151561365a5761010d60008681526020019081526020016000206000858152602001908152602001600020600083815260200190815260200160002060010154905082600c60008781526020019081526020016000206000838152602001908152602001600020600101600082825401925050819055505b8180600101925050613591565b600161010f6000878152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b60008060006001848154811015156136c057fe5b906000526020600020906005020160040160009054906101000a900460ff161515156136eb57600080fd5b6002858154811015156136fa57fe5b906000526020600020906002020160010160009054906101000a900460ff16151561372457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff1660018581548110151561374a57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561379e57600080fd5b6002858154811015156137ad57fe5b906000526020600020906002020160010160029054906101000a900460ff161515156137d857600080fd5b6101116000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615151561381757600080fd5b600092505b600c83101561392d5760006001026000191661010d60008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060000154600019161415156139205761010d6000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000206001015491506001848154811015156138be57fe5b9060005260206000209060050201600101549050600161010c6000878152602001908152602001600020600084815260200190815260200160002060008360001916600019168152602001908152602001600020600082825401925050819055505b828060010193505061381c565b60016101116000878152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156139cd57600080fd5b806009816000191690555050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613a3c57600080fd5b60018054806001018281613a5091906142f8565b9160005260206000209060050201600060a0604051908101604052808573ffffffffffffffffffffffffffffffffffffffff1681526020016000600102600019168152602001600081526020016000815260200160001515815250909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190600019169055604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613b9e57600080fd5b60018083815481101515613bae57fe5b906000526020600020906005020160040160006101000a81548160ff021916908315150217905550600090505b600c811015613d2f57600060036000600b6000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff021916908315150217905550600060036000600b6000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160016101000a81548160ff0219169083151502179055508080600101915050613bdb565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613d8e57600080fd5b6000600183815481101515613d9f57fe5b906000526020600020906005020160030154141515613dbd57600080fd5b600060010260001916600183815481101515613dd557fe5b90600052602060002090600502016001015460001916141515613df757600080fd5b80600183815481101515613e0757fe5b906000526020600020906005020160010181600019169055505050565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549150600c84101515613e7b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1661010e60008781526020019081526020016000206000848152602001908152602001600020600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613f0f57600080fd5b600285815481101515613f1e57fe5b906000526020600020906002020160010160009054906101000a900460ff16151515613f4957600080fd5b600285815481101515613f5857fe5b906000526020600020906002020160010160019054906101000a900460ff161515613f8257600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515613fdd57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160019054906101000a900460ff16151561403857600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411151561408957600080fd5b600090505b600c811015614136573373ffffffffffffffffffffffffffffffffffffffff1661010e60008781526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561412957614200565b808060010191505061408e565b3361010e60008781526020019081526020016000206000848152602001908152602001600020600086815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508261010e60008781526020019081526020016000206000848152602001908152602001600020600086815260200190815260200160002060000160146101000a81548160ff0219169083151502179055505b5050505050565b81548183558181151161423457600202816002028360005260206000209182019101614233919061432a565b5b505050565b61018060405190810160405280600c905b600080191681526020019060019003908161424a5790505090565b61018060405190810160405280600c905b60008152602001906001900390816142765790505090565b61018060405190810160405280600c905b600073ffffffffffffffffffffffffffffffffffffffff1681526020019060019003908161429f5790505090565b61018060405190810160405280600c905b600015158152602001906001900390816142de5790505090565b81548183558181151161432557600502816005028360005260206000209182019101614324919061438d565b5b505050565b61438a91905b80821115614386576000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff02191690556001820160026101000a81549060ff021916905550600201614330565b5090565b90565b6143fc91905b808211156143f857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550600501614393565b5090565b905600a165627a7a723058209d8d801abbeaf84f8c028ad36cf2bd1d98749e28ce572eda1d228864f8c075ee0029'

//Global variables

//Words and name obtained from the file
var file_data = {kantcoin_org_words : "", kantcoin_org_data : ""}

// The innerHTML with the user profile data
var profile_html = ""

//When the user have not yet created the profile page we should exibit the default page
var profile_exists = false

//Getting query string params
var custom_provider = getParameterByName("custom_provider")

//Verifying if the providers use https
if (!isValidURL(custom_provider)){
    custom_provider = ""
}

//The user token for the custom providers
var user_token = getParameterByName("user_token")

//Verifying if the token has one "|"
if (user_token && ((user_token.match(/\|/g) || []).length != 1)){
    user_token = ""
}

//Just to display a default user during the vault creation
var user_login = getParameterByName("user_login")

//The child window used to create new vault
var child = {}

//For internationalization
var locale = ""

//This variable defines whether the search button will call the search for candidates, campaigns, parties, groups, statistics, donations, voting or questions
var current_search = "campaigns"

//The current campaign with all its data
var current_campaign = {
    id : "",
    ipns: "",
    name: "",
    description: "",
    country: "",
    period: "",
    link: "",
    image: "",
    address: "",
    contract: "",
    whisper: "",
    regexp: ""
}

//Retrieving the last campaign
if (localStorage.getItem("kantcoin_org_current_campaign")){
    current_campaign = JSON.parse(localStorage.getItem("kantcoin_org_current_campaign"))
}

//Wallet with keys the size required by geth.
var wallet = {}

//It is used to connect to the blockchain
var web3 = {}

//Used to allow users to send transactions
var is_voter = false

//Used to allow users to admin campaigns
var is_owner = false

//To avoid "Refused to evaluate a string as JavaScript because 'unsafe-eval' ... in the following Content Security Policy directive"
//It will be used in runBlockChain and instantiateWeb3 functions
var the_callback

//The ethereum contract
var the_contract

//This variable indicates that the current campaign was not found in "localhost:8080", so it was necessary to search it in "ipfs.io" site
var use_ipfs_io = false

//A map of maps. ballot_number => candidates_map
var candidatesPerBallotMap = new Map()

//Questions and parties are independent of ballots
var questionsMap = new Map()
var partiesMap = new Map()
var gcategoriesMap = new Map()

//Categories with their groups
var jsonGroups = {}

//It determines if whisper will do something when voter's requests arrive
var listen_whisper = true

//User's ip
var ip = ""

//Enode to connect with other peers
var enode_without_ip = ""

//Comma separated enode URLs for P2P v5 discovery bootstrap
var rand_enodes = " "

//Votes received by the group chainperson should be sent all together
var received_votes = []

//This variable allows the campaign creator to decide who can share his or her enode address on the campaign's IPFS
var authorized_chairpersons = []

//Setting the variables according to the user's language
window.addEventListener("load", function (ev) {
    if (navigator.language){
        locale = navigator.language.substring(0,2).toLowerCase()
    }

    if (!locale){
        klang = klang.english
        kcountries = kcountries.en
    } else if(locale == 'pt'){
        klang = klang.portuguese
        kcountries = kcountries.pt
    } else if(locale == 'ar'){
        kcountries = kcountries.ar
    } else if(locale == 'az'){
        kcountries = kcountries.az
    } else if(locale == 'be'){
        kcountries = kcountries.be
    } else if(locale == 'bg'){
        kcountries = kcountries.bg
    } else if(locale == 'bs'){
        kcountries = kcountries.bs
    } else if(locale == 'cs'){
        kcountries = kcountries.cs
    } else if(locale == 'da'){
        kcountries = kcountries.da
    } else if(locale == 'de'){
        kcountries = kcountries.de
    } else if(locale == 'el'){
        kcountries = kcountries.el
    } else if(locale == 'en'){
        klang = klang.english
        kcountries = kcountries.en
    } else if(locale == 'es'){
        kcountries = kcountries.es
    } else if(locale == 'et'){
        kcountries = kcountries.et
    } else if(locale == 'fa'){
        kcountries = kcountries.fa
    } else if(locale == 'fi'){
        kcountries = kcountries.fi
    } else if(locale == 'fr'){
        kcountries = kcountries.fr
    } else if(locale == 'he'){
        kcountries = kcountries.he
    } else if(locale == 'hr'){
        kcountries = kcountries.hr
    } else if(locale == 'hu'){
        kcountries = kcountries.hu
    } else if(locale == 'hy'){
        kcountries = kcountries.hy
    } else if(locale == 'id'){
        kcountries = kcountries.id
    } else if(locale == 'it'){
        kcountries = kcountries.it
    } else if(locale == 'ja'){
        kcountries = kcountries.ja
    } else if(locale == 'ka'){
        kcountries = kcountries.ka
    } else if(locale == 'kk'){
        kcountries = kcountries.kk
    } else if(locale == 'ko'){
        kcountries = kcountries.ko
    } else if(locale == 'ky'){
        kcountries = kcountries.ky
    } else if(locale == 'lt'){
        kcountries = kcountries.lt
    } else if(locale == 'lv'){
        kcountries = kcountries.lv
    } else if(locale == 'mk'){
        kcountries = kcountries.mk
    } else if(locale == 'mn'){
        kcountries = kcountries.mn
    } else if(locale == 'nb'){
        kcountries = kcountries.nb
    } else if(locale == 'nl'){
        kcountries = kcountries.nl
    } else if(locale == 'nn'){
        kcountries = kcountries.nn
    } else if(locale == 'pl'){
        kcountries = kcountries.pl
    } else if(locale == 'ro'){
        kcountries = kcountries.ro
    } else if(locale == 'ru'){
        kcountries = kcountries.ru
    } else if(locale == 'sk'){
        kcountries = kcountries.sk
    } else if(locale == 'sl'){
        kcountries = kcountries.sl
    } else if(locale == 'sr'){
        kcountries = kcountries.sr
    } else if(locale == 'sv'){
        kcountries = kcountries.sv
    } else if(locale == 'tr'){
        kcountries = kcountries.tr
    } else if(locale == 'uk'){
        kcountries = kcountries.uk
    } else if(locale == 'uz'){
        kcountries = kcountries.uz
    } else if(locale == 'zh'){
        kcountries = kcountries.zh
    } else {
        klang = klang.english
        kcountries = kcountries.en
    }

    document.title = klang.title
    menu_vault_li.innerHTML = klang.vault
    create_vault_link.text = klang.create_vault
    register_vault_link.text = klang.register_vault
    open_vault_link.text = klang.open_vault
    close_vault_link.text = klang.close_vault
    save_vault_link.text = klang.save_vault
    menu_campaign_li.innerHTML = klang.campaign
    register_voter_link.text = klang.register_voter
    create_campaign_link.text = klang.create_campaign
    modal1_title.innerHTML = klang.modal1_title
    modal2_title.innerHTML = klang.modal2_title
    modal1_file.innerHTML = klang.modal1_file
    modal1_password.innerHTML = klang.password
    modal1_user.innerHTML = klang.modal1_user + (custom_provider? "":klang.modal1_user_complement)
    modal2_user.innerHTML = klang.modal1_user + (custom_provider? "":klang.modal1_user_complement)
    modal1_open.text = klang.modal1_open
    modal2_file_name.innerHTML = klang.modal2_file_name
    modal2_save.text = klang.modal2_save
    modal3_title.innerHTML = klang.insert_password
    modal3_password.innerHTML = klang.password
    modal3_ok.text = klang.ok
    modal4_title.innerHTML = klang.modal4_title
    modal4_user.innerHTML = (user_token? "Token" : custom_provider? "Login" : "Login" + klang.modal4_user_complement)
    modal4_password1.innerHTML = klang.modal4_password1
    modal4_password2.innerHTML = klang.modal4_password2
    modal4_confirm.text = klang.modal4_confirm
    modal5_title.innerHTML = klang.modal5_title
    modal5_login_provider.innerHTML = klang.modal5_login_provider
    modal5_send.text = klang.modal5_send
    campaign_name_label.innerHTML = klang.campaign_name_label
    campaign_description_label.innerHTML = klang.campaign_description_label
    create_campaign_title.innerHTML = klang.create_campaign_title
    country_label.innerHTML = klang.country_label
    campaigns_community_label.innerHTML = klang.campaigns_community_label
    other_campaigns_community_label.innerHTML = klang.other_campaigns_community_label
    kantcoin_option.innerHTML = klang.kantcoin_option
    other_option.innerHTML = klang.other_option
    prefix_voters_label.innerHTML = klang.prefix_voters_label
    regexp_label.innerHTML = klang.regexp_label
    votation_rounds_selected_option.innerHTML = klang.votation_rounds_selected_option
    donation_rounds_selected_option.innerHTML = klang.donation_rounds_selected_option
    create_campaign_button.innerHTML = klang.create_campaign_button
    cancel_create_campaign_button.innerHTML = klang.cancel_button
    image_label.innerHTML = klang.image_label
    campaign_external_page_label.innerHTML = klang.campaign_external_page_label
    initial_date_label.innerHTML = klang.initial_date_label
    final_date_label.innerHTML = klang.final_date_label
    create_campaign_basic_info.innerHTML = klang.create_campaign_basic_info
    create_campaign_votation_info.innerHTML = klang.create_campaign_votation_info
    create_campaign_donations_info.innerHTML = klang.create_campaign_donations_info
    create_campaign_statistics_info.innerHTML = klang.create_campaign_statistics_info
    campaign_admin_title.innerHTML = klang.campaign_admin_title
    campaign_admin_candidates.innerHTML = klang.campaign_admin_candidates
    campaign_admin_parties.innerHTML = klang.campaign_admin_parties
    campaign_admin_questions.innerHTML = klang.campaign_admin_questions
    campaign_admin_ballots.innerHTML = klang.campaign_admin_ballots
    campaign_admin_groups.innerHTML = klang.campaign_admin_groups
    campaign_admin_chairpersons.innerHTML = klang.campaign_admin_chairpersons
    close_campaign_admin_button.innerHTML = klang.close_campaign_admin_button
    insert_candidates_title.innerHTML = klang.insert_candidates_title
    insert_candidates_label.innerHTML = klang.insert_candidates_label
    insert_candidates_button.innerHTML = klang.insert_candidates_button
    accepted_donation_values_label.innerHTML = klang.accepted_donation_values_label
    validation_ipns1_label.innerHTML = klang.validation_ipns1_label
    validation_ipns2_label.innerHTML = klang.validation_ipns2_label
    insert_parties_title.innerHTML = klang.insert_parties_title
    insert_parties_label.innerHTML = klang.insert_parties_label
    insert_parties_button.innerHTML = klang.insert_parties_button
    insert_questions_title.innerHTML = klang.insert_questions_title
    insert_questions_label.innerHTML = klang.insert_questions_label
    insert_questions_button.innerHTML = klang.insert_questions_button
    insert_group_categories_title.innerHTML = klang.insert_group_categories_title
    insert_group_categories_label.innerHTML = klang.insert_group_categories_label
    insert_group_categories_button.innerHTML = klang.insert_group_categories_button
    create_round_title.innerHTML = klang.create_round_title
    create_round_id_label.innerHTML = klang.create_round_id_label
    create_round_type_selected_option.innerHTML = klang.create_round_type_selected_option
    create_round_type_normal.innerHTML = klang.create_round_type_normal
    create_round_type_donations.innerHTML = klang.create_round_type_donations
    create_round_button.innerHTML = klang.create_round_button
    listen_whisper_title.innerHTML = klang.listen_whisper_title
    listen_whisper_yes_label.innerHTML = klang.listen_whisper_yes_label
    listen_whisper_no_label.innerHTML = klang.listen_whisper_no_label
    current_ballot_label.innerHTML = klang.current_ballot_label
    stop_round_button.innerHTML = klang.stop_round_button
    close_round_button.innerHTML = klang.close_round_button
    group_categories_select_label.innerHTML = klang.group_categories_select_label
    create_groups_label.innerHTML = klang.create_groups_label
    how_many_groups_label.innerHTML = klang.how_many_groups_label
    create_groups_button.innerHTML = klang.create_groups_button
    groups_chairperson_label.innerHTML = klang.groups_chairperson_label
    groups_value_label.innerHTML = klang.groups_value_label
    seconds_to_conclude_groups_creation_label.innerHTML = klang.seconds_to_conclude_groups_creation_label
    inform_address_label.innerHTML = klang.inform_address_label
    add_whisper_label.innerHTML = klang.add_whisper_label
    add_whisper_button.innerHTML = klang.add_whisper_button
    commit_label.innerHTML = klang.commit_label
    pre_commit_button.innerHTML = klang.pre_commit_button
    commit_button.innerHTML = klang.commit_button
    send_votes_label.innerHTML = klang.send_votes_label
    send_votes_button.innerHTML = klang.send_votes_button
    send_enode_label.innerHTML = klang.send_enode_label
    send_enode_button.innerHTML = klang.send_enode_button
    //Start listening whisper requests by default
    whisper_checkbox.checked = true

    //Countries names
    AF_option.innerHTML = kcountries.AF
    AX_option.innerHTML = kcountries.AX
    AL_option.innerHTML = kcountries.AL
    DZ_option.innerHTML = kcountries.DZ
    AS_option.innerHTML = kcountries.AS
    AD_option.innerHTML = kcountries.AD
    AO_option.innerHTML = kcountries.AO
    AI_option.innerHTML = kcountries.AI
    AQ_option.innerHTML = kcountries.AQ
    AG_option.innerHTML = kcountries.AG
    AR_option.innerHTML = kcountries.AR
    AM_option.innerHTML = kcountries.AM
    AW_option.innerHTML = kcountries.AW
    AU_option.innerHTML = kcountries.AU
    AT_option.innerHTML = kcountries.AT
    AZ_option.innerHTML = kcountries.AZ
    BS_option.innerHTML = kcountries.BS
    BH_option.innerHTML = kcountries.BH
    BD_option.innerHTML = kcountries.BD
    BB_option.innerHTML = kcountries.BB
    BY_option.innerHTML = kcountries.BY
    BE_option.innerHTML = kcountries.BE
    BZ_option.innerHTML = kcountries.BZ
    BJ_option.innerHTML = kcountries.BJ
    BM_option.innerHTML = kcountries.BM
    BT_option.innerHTML = kcountries.BT
    BO_option.innerHTML = kcountries.BO
    BQ_option.innerHTML = kcountries.BQ
    BA_option.innerHTML = kcountries.BA
    BW_option.innerHTML = kcountries.BW
    BV_option.innerHTML = kcountries.BV
    BR_option.innerHTML = kcountries.BR
    IO_option.innerHTML = kcountries.IO
    BN_option.innerHTML = kcountries.BN
    BG_option.innerHTML = kcountries.BG
    BF_option.innerHTML = kcountries.BF
    BI_option.innerHTML = kcountries.BI
    KH_option.innerHTML = kcountries.KH
    CM_option.innerHTML = kcountries.CM
    CA_option.innerHTML = kcountries.CA
    CV_option.innerHTML = kcountries.CV
    KY_option.innerHTML = kcountries.KY
    CF_option.innerHTML = kcountries.CF
    TD_option.innerHTML = kcountries.TD
    CL_option.innerHTML = kcountries.CL
    CN_option.innerHTML = kcountries.CN
    CX_option.innerHTML = kcountries.CX
    CC_option.innerHTML = kcountries.CC
    CO_option.innerHTML = kcountries.CO
    KM_option.innerHTML = kcountries.KM
    CG_option.innerHTML = kcountries.CG
    CD_option.innerHTML = kcountries.CD
    CK_option.innerHTML = kcountries.CK
    CR_option.innerHTML = kcountries.CR
    CI_option.innerHTML = kcountries.CI
    HR_option.innerHTML = kcountries.HR
    CU_option.innerHTML = kcountries.CU
    CW_option.innerHTML = kcountries.CW
    CY_option.innerHTML = kcountries.CY
    CZ_option.innerHTML = kcountries.CZ
    DK_option.innerHTML = kcountries.DK
    DJ_option.innerHTML = kcountries.DJ
    DM_option.innerHTML = kcountries.DM
    DO_option.innerHTML = kcountries.DO
    EC_option.innerHTML = kcountries.EC
    EG_option.innerHTML = kcountries.EG
    SV_option.innerHTML = kcountries.SV
    GQ_option.innerHTML = kcountries.GQ
    ER_option.innerHTML = kcountries.ER
    EE_option.innerHTML = kcountries.EE
    ET_option.innerHTML = kcountries.ET
    FK_option.innerHTML = kcountries.FK
    FO_option.innerHTML = kcountries.FO
    FJ_option.innerHTML = kcountries.FJ
    FI_option.innerHTML = kcountries.FI
    FR_option.innerHTML = kcountries.FR
    GF_option.innerHTML = kcountries.GF
    PF_option.innerHTML = kcountries.PF
    TF_option.innerHTML = kcountries.TF
    GA_option.innerHTML = kcountries.GA
    GM_option.innerHTML = kcountries.GM
    GE_option.innerHTML = kcountries.GE
    DE_option.innerHTML = kcountries.DE
    GH_option.innerHTML = kcountries.GH
    GI_option.innerHTML = kcountries.GI
    GR_option.innerHTML = kcountries.GR
    GL_option.innerHTML = kcountries.GL
    GD_option.innerHTML = kcountries.GD
    GP_option.innerHTML = kcountries.GP
    GU_option.innerHTML = kcountries.GU
    GT_option.innerHTML = kcountries.GT
    GG_option.innerHTML = kcountries.GG
    GN_option.innerHTML = kcountries.GN
    GW_option.innerHTML = kcountries.GW
    GY_option.innerHTML = kcountries.GY
    HT_option.innerHTML = kcountries.HT
    HM_option.innerHTML = kcountries.HM
    VA_option.innerHTML = kcountries.VA
    HN_option.innerHTML = kcountries.HN
    HK_option.innerHTML = kcountries.HK
    HU_option.innerHTML = kcountries.HU
    IS_option.innerHTML = kcountries.IS
    IN_option.innerHTML = kcountries.IN
    ID_option.innerHTML = kcountries.ID
    IR_option.innerHTML = kcountries.IR
    IQ_option.innerHTML = kcountries.IQ
    IE_option.innerHTML = kcountries.IE
    IM_option.innerHTML = kcountries.IM
    IL_option.innerHTML = kcountries.IL
    IT_option.innerHTML = kcountries.IT
    JM_option.innerHTML = kcountries.JM
    JP_option.innerHTML = kcountries.JP
    JE_option.innerHTML = kcountries.JE
    JO_option.innerHTML = kcountries.JO
    KZ_option.innerHTML = kcountries.KZ
    KE_option.innerHTML = kcountries.KE
    KI_option.innerHTML = kcountries.KI
    KP_option.innerHTML = kcountries.KP
    KR_option.innerHTML = kcountries.KR
    KW_option.innerHTML = kcountries.KW
    KG_option.innerHTML = kcountries.KG
    LA_option.innerHTML = kcountries.LA
    LV_option.innerHTML = kcountries.LV
    LB_option.innerHTML = kcountries.LB
    LS_option.innerHTML = kcountries.LS
    LR_option.innerHTML = kcountries.LR
    LY_option.innerHTML = kcountries.LY
    LI_option.innerHTML = kcountries.LI
    LT_option.innerHTML = kcountries.LT
    LU_option.innerHTML = kcountries.LU
    MO_option.innerHTML = kcountries.MO
    MK_option.innerHTML = kcountries.MK
    MG_option.innerHTML = kcountries.MG
    MW_option.innerHTML = kcountries.MW
    MY_option.innerHTML = kcountries.MY
    MV_option.innerHTML = kcountries.MV
    ML_option.innerHTML = kcountries.ML
    MT_option.innerHTML = kcountries.MT
    MH_option.innerHTML = kcountries.MH
    MQ_option.innerHTML = kcountries.MQ
    MR_option.innerHTML = kcountries.MR
    MU_option.innerHTML = kcountries.MU
    YT_option.innerHTML = kcountries.YT
    MX_option.innerHTML = kcountries.MX
    FM_option.innerHTML = kcountries.FM
    MD_option.innerHTML = kcountries.MD
    MC_option.innerHTML = kcountries.MC
    MN_option.innerHTML = kcountries.MN
    ME_option.innerHTML = kcountries.ME
    MS_option.innerHTML = kcountries.MS
    MA_option.innerHTML = kcountries.MA
    MZ_option.innerHTML = kcountries.MZ
    MM_option.innerHTML = kcountries.MM
    NA_option.innerHTML = kcountries.NA
    NR_option.innerHTML = kcountries.NR
    NP_option.innerHTML = kcountries.NP
    NL_option.innerHTML = kcountries.NL
    NC_option.innerHTML = kcountries.NC
    NZ_option.innerHTML = kcountries.NZ
    NI_option.innerHTML = kcountries.NI
    NE_option.innerHTML = kcountries.NE
    NG_option.innerHTML = kcountries.NG
    NU_option.innerHTML = kcountries.NU
    NF_option.innerHTML = kcountries.NF
    MP_option.innerHTML = kcountries.MP
    NO_option.innerHTML = kcountries.NO
    OM_option.innerHTML = kcountries.OM
    PK_option.innerHTML = kcountries.PK
    PW_option.innerHTML = kcountries.PW
    PS_option.innerHTML = kcountries.PS
    PA_option.innerHTML = kcountries.PA
    PG_option.innerHTML = kcountries.PG
    PY_option.innerHTML = kcountries.PY
    PE_option.innerHTML = kcountries.PE
    PH_option.innerHTML = kcountries.PH
    PN_option.innerHTML = kcountries.PN
    PL_option.innerHTML = kcountries.PL
    PT_option.innerHTML = kcountries.PT
    PR_option.innerHTML = kcountries.PR
    QA_option.innerHTML = kcountries.QA
    RE_option.innerHTML = kcountries.RE
    RO_option.innerHTML = kcountries.RO
    RU_option.innerHTML = kcountries.RU
    RW_option.innerHTML = kcountries.RW
    BL_option.innerHTML = kcountries.BL
    SH_option.innerHTML = kcountries.SH
    KN_option.innerHTML = kcountries.KN
    LC_option.innerHTML = kcountries.LC
    MF_option.innerHTML = kcountries.MF
    PM_option.innerHTML = kcountries.PM
    VC_option.innerHTML = kcountries.VC
    WS_option.innerHTML = kcountries.WS
    SM_option.innerHTML = kcountries.SM
    ST_option.innerHTML = kcountries.ST
    SA_option.innerHTML = kcountries.SA
    SN_option.innerHTML = kcountries.SN
    RS_option.innerHTML = kcountries.RS
    SC_option.innerHTML = kcountries.SC
    SL_option.innerHTML = kcountries.SL
    SG_option.innerHTML = kcountries.SG
    SX_option.innerHTML = kcountries.SX
    SK_option.innerHTML = kcountries.SK
    SI_option.innerHTML = kcountries.SI
    SB_option.innerHTML = kcountries.SB
    SO_option.innerHTML = kcountries.SO
    ZA_option.innerHTML = kcountries.ZA
    GS_option.innerHTML = kcountries.GS
    SS_option.innerHTML = kcountries.SS
    ES_option.innerHTML = kcountries.ES
    LK_option.innerHTML = kcountries.LK
    SD_option.innerHTML = kcountries.SD
    SR_option.innerHTML = kcountries.SR
    SJ_option.innerHTML = kcountries.SJ
    SZ_option.innerHTML = kcountries.SZ
    SE_option.innerHTML = kcountries.SE
    CH_option.innerHTML = kcountries.CH
    SY_option.innerHTML = kcountries.SY
    TW_option.innerHTML = kcountries.TW
    TJ_option.innerHTML = kcountries.TJ
    TZ_option.innerHTML = kcountries.TZ
    TH_option.innerHTML = kcountries.TH
    TL_option.innerHTML = kcountries.TL
    TG_option.innerHTML = kcountries.TG
    TK_option.innerHTML = kcountries.TK
    TO_option.innerHTML = kcountries.TO
    TT_option.innerHTML = kcountries.TT
    TN_option.innerHTML = kcountries.TN
    TR_option.innerHTML = kcountries.TR
    TM_option.innerHTML = kcountries.TM
    TC_option.innerHTML = kcountries.TC
    TV_option.innerHTML = kcountries.TV
    UG_option.innerHTML = kcountries.UG
    UA_option.innerHTML = kcountries.UA
    AE_option.innerHTML = kcountries.AE
    GB_option.innerHTML = kcountries.GB
    US_option.innerHTML = kcountries.US
    UM_option.innerHTML = kcountries.UM
    UY_option.innerHTML = kcountries.UY
    UZ_option.innerHTML = kcountries.UZ
    VU_option.innerHTML = kcountries.VU
    VE_option.innerHTML = kcountries.VE
    VN_option.innerHTML = kcountries.VN
    VG_option.innerHTML = kcountries.VG
    VI_option.innerHTML = kcountries.VI
    WF_option.innerHTML = kcountries.WF
    EH_option.innerHTML = kcountries.EH
    YE_option.innerHTML = kcountries.YE
    ZM_option.innerHTML = kcountries.ZM
    ZW_option.innerHTML = kcountries.ZW

    //Datepicker translations
    $('.datepicker').pickadate({
        selectMonths: true,
        //Displaying only 3 years
        selectYears: 3,
        today: klang.today,
        clear: klang.clear,
        close: klang.ok,
        closeOnSelect: false
    })

    //Setting the data-tooltip of the password input
    var aElementP1 = $('#password_div1')
    aElementP1.attr('data-tooltip', klang.min_chars)
    aElementP1.tooltip()

    //Setting the data-tooltip of the user input
    var aElementP2 = $('#user_div1')
    aElementP2.attr('data-tooltip', klang.hyphen)
    aElementP2.tooltip()

    //Setting the data-tooltip of the stop round button
    var aElementP3 = $('#stop_round_button')
    aElementP3.attr('data-tooltip', klang.stop_round_button_tooltip)
    aElementP3.tooltip()

    //Setting the data-tooltip of the close round button
    var aElementP4 = $('#close_round_button')
    aElementP4.attr('data-tooltip', klang.close_round_button_tooltip)
    aElementP4.tooltip()

    //Register modal login provider input
    login_provider.value = (custom_provider?custom_provider:"")

    //In case the user token has been provided
    kantcoin_org_user3.value = (user_token? user_token: "")

    //In case the user login has been provided
    kantcoin_org_user3.value = (user_login? user_login: kantcoin_org_user3.value)

    //Sidenav menu
    my_account_menu_item.innerHTML = klang.my_account
    campaign_info_menu_item.innerHTML = klang.campaign_info
    candidates_menu_item.innerHTML = klang.candidates
    parties_menu_item.innerHTML = klang.parties
    groups_menu_item.innerHTML = klang.groups
    questions_menu_item.innerHTML = klang.questions
    voting_menu_item.innerHTML = klang.voting
    donations_menu_item.innerHTML = klang.donations
    statistics_menu_item.innerHTML = klang.statistics

    //The first title is the whatsup page title
    header_title.innerHTML = klang.whatsup

    //Submiting modal forms in case of enter pressed
    kantcoin_org_password1.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            modal1_open.click()
        }
    })
    file_name1.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            modal2_save.click()
        }
    })
    kantcoin_org_password2.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            modal3_ok.click()
        }
    })
    kantcoin_org_password4.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            modal4_confirm.click()
        }
    })
    login_provider.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            modal5_send.click()
        }
    })

    //Adding listeners to the searchbar icon
    search_icon.addEventListener("click", searchFor)
    search.addEventListener("keypress", function (event) {
        var keyCode = event.keyCode
        if(keyCode == 13){
            searchFor()
        }
    })

    //Cancel_create_campaign_button listener. It cleans the fields
    cancel_create_campaign_button.addEventListener("click", clearCreateCampaignFields)

    //Listener to close admin campaign page
    close_campaign_admin_button.addEventListener("click", clearAdminCampaign)

    //Adding listener to the insert_candidates_button. It inserts the candidates into blockchain
    insert_candidates_button.addEventListener("click", insertCandidates)

    //They are stored on IPFS
    insert_parties_button.addEventListener("click", insertParties)

    //They are stored on IPFS
    insert_questions_button.addEventListener("click", insertQuestions)

    //They are stored on IPFS
    insert_group_categories_button.addEventListener("click", insertGroupCategories)

    //Adding listener to creating round button. It creates a new donation or votation ballot
    create_round_button.addEventListener("click", function () {
        var is_donation = (create_round_type.value == "true")
        var how_many_ballots = the_contract.howManyBallots().toNumber()
        the_contract.addBallot(web3.fromAscii(create_round_id.value), is_donation)
        the_contract.defineCurrentVoteMessage(web3.fromAscii(create_round_id.value + " - " + current_campaign.id))
        the_contract.defineCurrentBallot(how_many_ballots)
        clearAdminCampaign()
    })

    //This listener create a determined number of groups
    create_groups_button.addEventListener("click", createGroups)

    //Listener that turns Whisper on and off
    whisper_checkbox.addEventListener("change",function() {
        var status = $(this).prop('checked')
        if (status){
            listen_whisper = true
        } else {
            listen_whisper = false
        }
    })

    //Listener to stop the current ballot
    stop_round_button.addEventListener("click", function (ev) {
        var current_ballot = the_contract.currentBallot().toNumber()
        the_contract.stopBallot(current_ballot)
    })

    //Listener to close the current ballot
    close_round_button.addEventListener("click", function (ev) {
        var current_ballot = the_contract.currentBallot().toNumber()
        the_contract.closeBallot(current_ballot)
    })

    //Every user may insert his or her Whisper address into the blockchain
    add_whisper_button.addEventListener("click", addWhisperAddressIntoBlockchain)

    //Only group chairpersons can/should call these methods
    pre_commit_button.addEventListener("click", preCommitVotes)
    commit_button.addEventListener("click", commitVotes)
    send_votes_button.addEventListener("click", sendVotes)
    send_enode_button.addEventListener("click", sendStoreEnodeMessage)

    //Setting the data-tooltip initial value
    var aElement = $('#search_icon')
    aElement.attr('data-tooltip', klang.search_campaign)
    aElement.tooltip()

    //Adding listeners to the sidenav menu
    my_account_menu_item.addEventListener("click", newMyAccountPage)

    //So far, only this option works
    var anchorElement = $('#search_icon')
    anchorElement.attr('data-tooltip', klang.search_campaign)
    anchorElement.tooltip()

    //Left menu items
    campaign_info_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.campaign_info
        openCampaignContract()
        openCampaignPage()
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_campaign)
        anchorElement.tooltip()
        current_search = "campaigns"
    })

    candidates_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.candidates
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_candidate)
        anchorElement.tooltip()
        current_search = "candidates"
        */
        document.title = klang.title
        loadCandidates(current_campaign.ipns)
        newCandidatesPage()
    })

    parties_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.parties
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_party)
        anchorElement.tooltip()
        current_search = "parties"
        */
        document.title = klang.title
        loadParties(current_campaign.ipns)
        newPartiesPage()
    })

    groups_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.groups
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_group)
        anchorElement.tooltip()
        current_search = "groups"
        */
        document.title = klang.title
        loadGroupCategories(current_campaign.ipns)
        //loadGroups() - inside loadGroupCategories
        newGroupCategoriesPage()
    })

    questions_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.questions
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_question)
        anchorElement.tooltip()
        current_search = "questions"
        */
        document.title = klang.title
        loadQuestions(current_campaign.ipns)
        newQuestionsPage()
    })

    voting_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.voting
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_voting)
        anchorElement.tooltip()
        current_search = "voting"
        */
        document.title = klang.title
        loadCandidates(current_campaign.ipns)
        newVotationPage()
    })

    donations_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.donations
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_donations)
        anchorElement.tooltip()
        current_search = "donations"
        */
        document.title = klang.title
        loadCandidates(current_campaign.ipns)
        newDonationsPage()
    })

    statistics_menu_item.addEventListener("click", function (event){
        header_title.innerHTML = klang.statistics
        content_page.innerHTML = ""
        header_info.innerHTML = ""
        openCampaignContract()
        /*
        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_statistics)
        anchorElement.tooltip()
        current_search = "statistics"
        */
        document.title = klang.title
    })

    //The logo listener
    logo_container.addEventListener("click", function (event){
        header_title.innerHTML = klang.whatsup
    })

    //Refreshing the screen with the stored key and user
    checkKey()

    //Loading the user profile / without the second callback (my_account_menu_item.click()) to not show the profile as the initial page
    loadProfileHTML()

    //In case of an omnibox search
    var query = getParameterByName("q", null)
    if (query){
        var numbers = /^[0-9]+$/
        if (query.match(numbers)){
            current_search = "campaigns"
            search.value = query
            searchFor()
        }
    }

    //Cleaning the address bar
    window.history.pushState("", "", "/#")

    //Loading the wallet if empty
    if (!wallet.address && sessionStorage.getItem("kantcoin_org_wallet")){
        wallet = JSON.parse(sessionStorage.getItem("kantcoin_org_wallet"))

        //Initializing the blockchain
        if (current_campaign.id){
            initBlockchain()
        }
    }

    //Obtaining user's ip to generate the enode after
    whatIsMyIp()

    //Loading the enodes in order to connect to the blockchain
    setRandEnodes()
})

//Displaying user's profile
function newMyAccountPage(){
        header_title.innerHTML = (sessionStorage.getItem("kantcoin_org_user")? klang.my_account_in_campaign: klang.my_account_standard)
        header_info.innerHTML = ""
        document.title = klang.my_account_title
        //Users cannot edit the root profile
        if (getDir() != "kroot"){
            //Getting the html content model
            content_page.innerHTML = my_account_page_html1.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            //Setting the labels
            watch_profile_container.innerHTML = klang.watch_profile
            profile_html_container.innerHTML = profile_html
            edit_profile_container.innerHTML = klang.edit_profile
            my_data_container.innerHTML = klang.my_data
            network_ids_container.innerHTML = klang.network_ids
            save_profile_container.innerHTML = klang.save_profile
            cancel_profile_button_container.innerHTML = klang.cancel_button
            user_id_container.innerHTML = klang.user_id_container + ":&nbsp;&nbsp;"
            pkey_container.innerHTML = klang.pkey_container + ":&nbsp;&nbsp;"
            provider_container.innerHTML = klang.provider_container + ":&nbsp;&nbsp;"
            profile_ipfs_container.innerHTML = klang.profile_ipfs_container + ":&nbsp;&nbsp;"
            candidate_radio_label.innerHTML =  klang.candidate_radio_label
            party_radio_label.innerHTML =  klang.party_radio_label
            user_kind_title.innerHTML = klang.user_kind_title + ":"
            user_photo_title.innerHTML = klang.user_photo_title + ":"
            user_name_title.innerHTML = klang.user_name_title + ":"
            save_user_data_container.innerHTML = klang.save_user_data_container
            cancel_data_button_container.innerHTML = klang.cancel_button

            //Initially the kind "candidate" will be checked
            candidate_radio.checked = true

            //Save User Data Listener
            save_user_data.addEventListener("click", saveUserData)
            cancel_user_data.addEventListener("click", myAccountMenuItemClick)

            //Setting the data
            current_user_id_container.innerHTML = sessionStorage.getItem("kantcoin_org_user")
            //The pkey
            if (wallet.address){
                current_pkey_container.innerHTML = wallet.address
            }
            current_provider_container.innerHTML = (custom_provider? custom_provider : "kantcoin.com")
            //Getting the IPNS address to display
            var request = new XMLHttpRequest()
            request.addEventListener("load", function() {
                if (this.responseText != "error") {
                    current_profile_ipfs_container.innerHTML = this.responseText
                    loadUserData()
                } else if (document.getElementById("current_profile_ipfs_container")){
                    current_profile_ipfs_container.innerHTML = klang.no_profile
                }
            })
            request.open('GET', "http://localhost:1985/queryGetIPNS=" + getDir(), true) //This key contains the ipfs address
            request.send()

            //Setting the materialnote editor with the profile html
            editor.innerHTML = profile_html

            //Adding the listeners
            save_profile.addEventListener("click", saveProfile)
            cancel_profile.addEventListener("click", myAccountMenuItemClick)

            $('#editor').materialnote({
                toolbar: [
                    ['all', ['undo','redo', 'paragraph', 'style', 'color', 'clear', 'table', 'hr', 'picture', 'link', 'ul', 'ol', 'bold', 'italic', 'underline', 'fullscreen', 'codeview', 'help']]
                ],
                disableLinkTarget:true,
                height:380,
                lang: (locale?locale:"en-US")
            })

        } else {
            content_page.innerHTML = my_account_page_html2.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            watch_profile_container.innerHTML = klang.watch_profile
            profile_html_container.innerHTML = profile_html
            edit_profile_container.innerHTML = klang.edit_profile
            my_data_container.innerHTML = klang.my_data
            network_ids_container.innerHTML = klang.network_ids
        }
        //initialize this collapsible
        $('#account_collapsible').collapsible()

        var anchorElement = $('#search_icon')
        anchorElement.attr('data-tooltip', klang.search_campaign)
        anchorElement.tooltip()
}

//Called after the user presses "Save data" button
function saveUserData(){
        var json_data_file = {name: user_name_input.value, photo: user_photo_input.value, kind: (candidate_radio.checked? "candidate" : "party")}
        var content = JSON.stringify(json_data_file)
        var content_url = content.replace(/\?/g, QUESTION_MARK)
        content_url = content_url.replace(/#/g, HASHTAG)
        content_url = content_url.replace(/"/g, DOUBLEQUOTE)
        content_url = content_url.replace(/'/g, QUOTE)

        //Inserting the candidate/party's data into the profile directory
        var request = new XMLHttpRequest()
        request.addEventListener("load", function() {
            loadProfileHTML(myAccountMenuItemClick)
        })
        request.open('GET', "http://localhost:1985/queryAddProfile=" + getDir() + THE_AND + content_url + THE_AND + "data", true)
        request.send()
        showPreloader(klang.wait_saving_profile)
}

//Access ipfs to get the name, photo and kind of user
function loadUserData(){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText != "error"){
            var json_data = JSON.parse(this.responseText)
            user_name_input.value = json_data.name
            user_photo_input.value = json_data.photo

            //candidate.radio is already checked
            if (json_data.kind == "party"){
                party_radio.checked = true
                candidate_radio.checked = false
            }
        }
    })

    request.open('GET', "http://localhost:1985/queryGetProfile=" + getDir() + "/data", true)
    request.send()
}

//Access ipfs to get candidates name, photo, and party
function loadCandidates(ipns){
    if (the_contract){
        var number_ballots = the_contract.howManyBallots().toNumber()
        for (j=0; j < number_ballots;j++){
            var donations_ballot = the_contract.ballots(0)[3]
            var request = new XMLHttpRequest()
            request.addEventListener("load", function() {
                if (this.responseText.indexOf("{") == 0){
                    var json_candidates = JSON.parse(this.responseText)
                    var ballot_number = this.responseURL.substring(this.responseURL.length - 1)
                    var candidatesMap = new Map()
                    var keys = Object.keys(json_candidates)
                    var values = Object.values(json_candidates)
                    for (i=0; i < keys.length; i++){
                        if (donations_ballot){
                            values[i].donations = the_contract.getCandidate(ballot_number, i)[1].toNumber()
                        } else {
                            values[i].votes = the_contract.getCandidate(ballot_number, i)[1].toNumber()
                        }
                        candidatesMap.set(keys[i],values[i])
                    }
                    candidatesPerBallotMap.set(ballot_number, candidatesMap)
                }
            })
            request.open('GET', (use_ipfs_io ? "https://ipfs.io/ipns/" : "http://localhost:8080/ipns/") + ipns + "/candidates_ballot" + j, true)
            request.send()
        }
    }
}

//Access ipfs to get topics and questions
function loadQuestions(ipns){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0){
            var json_questions = JSON.parse(this.responseText)
            var aux_questionsMap = new Map()
            var keys = Object.keys(json_questions)
            var values = Object.values(json_questions)
            for (i=0; i < keys.length; i++){
                aux_questionsMap.set(keys[i],values[i])
            }
            questionsMap = aux_questionsMap
        }
    })
    request.open('GET', (use_ipfs_io ? "https://ipfs.io/ipns/" : "http://localhost:8080/ipns/") + ipns + "/questions", true)
    request.send()
}

//Access ipfs to get topics and questions
function loadGroupCategories(ipns){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0){
            var json_group_categories = JSON.parse(this.responseText)
            var aux_group_categoriesMap = new Map()
            var keys = Object.keys(json_group_categories)
            var values = Object.values(json_group_categories)
            for (i=0; i < keys.length; i++){
                aux_group_categoriesMap.set(keys[i],values[i])
            }
            gcategoriesMap = aux_group_categoriesMap
            loadGroups()
        }
    })
    request.open('GET', (use_ipfs_io ? "https://ipfs.io/ipns/" : "http://localhost:8080/ipns/") + ipns + "/group_categories", true)
    request.send()
}


//Access ipfs to get parties' names and photos
function loadParties(ipns){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0){
            var json_parties = JSON.parse(this.responseText)
            var aux_partiesMap = new Map()
            var keys = Object.keys(json_parties)
            var values = Object.values(json_parties)
            for (i=0; i < keys.length; i++){
                aux_partiesMap.set(keys[i],values[i])
            }
            partiesMap = aux_partiesMap
        }
    })
    request.open('GET', (use_ipfs_io ? "https://ipfs.io/ipns/" : "http://localhost:8080/ipns/") + ipns + "/parties", true)
    request.send()
}

//Displaying candidates
function newCandidatesPage(){
    if (current_campaign.id){
        content_page.innerHTML = candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
        candidate_photo_th.innerHTML = klang.candidate_photo_th
        candidate_name_th.innerHTML = klang.candidate_name_th
        candidate_party_th.innerHTML = klang.candidate_party_th
        vote_donate_th.innerHTML = klang.vote_donate_th

        if (the_contract){
            var current_ballot = the_contract.currentBallot().toNumber()

            var ballot_id = the_contract.ballots(current_ballot)[0]
            if (ballot_id != "0x0000000000000000000000000000000000000000000000000000000000000000" && ballot_id != "0x"){
                header_info.innerHTML = ballot_id_header_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[id]]", web3.toAscii(ballot_id))
            }

            var json_vote = ""
            if (localStorage.getItem("kantcoin_org_vote")){
                json_vote = JSON.parse(localStorage.getItem("kantcoin_org_vote"))
                if ((json_vote.ballot != current_ballot)||(json_vote.campaign != current_campaign.id)){
                    json_vote = ""
                    localStorage.setItem("kantcoin_org_vote","")
                }
            }
            var is_donation = the_contract.ballots(current_ballot)[1]
            var candidatesMap = candidatesPerBallotMap.get('' + current_ballot)
            var i = 0
            var ipfs_hex = ""
            var number_candidates = the_contract.howManyCandidatesInBallot(current_ballot).toNumber()

            do{
                var candidate = the_contract.getCandidate(current_ballot, i)
                ipfs_hex = candidate[0]
                var ipfs = fromBytes32ToIPFS(ipfs_hex)
                if ((ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000") && candidatesMap && candidatesMap.get(ipfs)){
                    var party = candidatesMap.get(ipfs).party
                    var name = candidatesMap.get(ipfs).name
                    var photo = candidatesMap.get(ipfs).photo
                    candidates_tbody.innerHTML += candidates_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[name]]", name).replace("[[party]]", party)
                        .replace("[[photo]]", photo).replace("[[vote_button_text]]", (is_donation? klang.donate_button_text: klang.vote_button_text)).replace("[[vote_button_id]]", (is_donation? "donate_button_id_" : "vote_button_id_") + i)
                        .replace("[[candidate_page_href]]", "http://localhost:8080/ipns/" + ipfs + "/profile")
                }
                i = i + 1
            }
            while (ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000" && i < number_candidates)

            var button_text = "vote_button_id_"
            if (is_donation){
                button_text = "donate_button_id_"
            }

            //Adding listeners to the candidate items buttons
            for (j=0; j < number_candidates; j++){
                if (json_vote){
                    if (json_vote.candidate == j){
                        var first_numbers = the_contract.getVotes(json_vote.ballot, json_vote.group)[0]
                        var candidates = the_contract.getVotes(json_vote.ballot, json_vote.group)[1]
                        for (k=0; k < first_numbers.length; k++){
                            if (first_numbers[k] == fromFirstNumberToBytes32(json_vote.first_number)){

                                //Verifying if the stored candidate is the same as the chosen candidate
                                var same_candidate = (candidates[k].toNumber() == json_vote.candidate)

                                if(document.getElementById(button_text + j)){
                                    document.getElementById(button_text + j).innerHTML = klang.vote_sent
                                    $("#" + button_text + j).addClass('disabled')
                                }
                                //Is the ballot stopped?
                                if (the_contract.ballots(json_vote.ballot)[2]){
                                    //Is the ballot closed?
                                    if (the_contract.ballots(json_vote.ballot)[1]){
                                        document.getElementById(button_text + j).innerHTML = (same_candidate? klang.vote_confirmed : klang.error)
                                        $("#" + button_text + j).addClass('disabled')
                                    } else {
                                        var addresses = the_contract.getConfirmations(json_vote.ballot, json_vote.group)[0]
                                        for (m=0; m < addresses.length; m++){
                                            if (addresses[m] == web3.eth.coinbase){
                                                document.getElementById(button_text + j).innerHTML = klang.vote_confirmed
                                                $("#" + button_text + j).addClass('disabled')
                                                break
                                            }
                                        }
                                        if (document.getElementById(button_text + j).innerHTML != klang.vote_confirmed){
                                            document.getElementById(button_text + j).innerHTML = klang.confirming
                                            $("#" + button_text + j).addClass('disabled')
                                            confirm(same_candidate)
                                        }
                                    }
                                }
                                break
                            }
                        }
                    } else {
                        if(document.getElementById(button_text + j)){
                            document.getElementById(button_text + j).style.visibility = "hidden"
                        }
                    }
                } else {
                    if(document.getElementById(button_text + j)){
                        document.getElementById(button_text + j).addEventListener("click", (is_donation? donate : vote))
                    }
                }
            }
        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }

    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Displaying votation results
function newVotationPage(){
    if (current_campaign.id){
        content_page.innerHTML = votation_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
        candidate_photo_th.innerHTML = klang.candidate_photo_th
        candidate_name_th.innerHTML = klang.candidate_name_th
        candidate_party_th.innerHTML = klang.candidate_party_th
        votes_th.innerHTML = klang.votes_th

        if (the_contract){
            var current_ballot = the_contract.currentBallot().toNumber()

            var ballot_id = the_contract.ballots(current_ballot)[0]
            if (ballot_id != "0x0000000000000000000000000000000000000000000000000000000000000000" && ballot_id != "0x"){
                header_info.innerHTML = ballot_id_header_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[id]]", web3.toAscii(ballot_id))
            }

            var is_donation = the_contract.ballots(current_ballot)[3]
            var candidatesMap = candidatesPerBallotMap.get('' + current_ballot)
            var i = 0
            var ipfs_hex = ""
            var votes = 0
            var number_candidates = the_contract.howManyCandidatesInBallot(current_ballot).toNumber()

            do{
                var candidate = the_contract.getCandidate(current_ballot, i)
                ipfs_hex = candidate[0]
                votes = candidate[1].toNumber()
                var ipfs = fromBytes32ToIPFS(ipfs_hex)
                if ((ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000") && candidatesMap && candidatesMap.get(ipfs)){
                    var party = candidatesMap.get(ipfs).party
                    var name = candidatesMap.get(ipfs).name
                    var photo = candidatesMap.get(ipfs).photo
                    candidates_tbody.innerHTML += votation_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[name]]", name).replace("[[party]]", party)
                        .replace("[[photo]]", photo).replace("[[votes]]", (is_donation? "-" : votes)).replace("[[candidate_page_href]]", "http://localhost:8080/ipns/" + ipfs + "/profile")
                }
                i = i + 1
            }
            while (ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000" && i < number_candidates)

         } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }

    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Displaying donations results
function newDonationsPage(){
    if (current_campaign.id){
        content_page.innerHTML = donations_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
        candidate_photo_th.innerHTML = klang.candidate_photo_th
        candidate_name_th.innerHTML = klang.candidate_name_th
        candidate_party_th.innerHTML = klang.candidate_party_th
        donations_th.innerHTML = klang.donations_th

        if (the_contract){
            var current_ballot = the_contract.currentBallot().toNumber()

            var ballot_id = the_contract.ballots(current_ballot)[0]
            if (ballot_id != "0x0000000000000000000000000000000000000000000000000000000000000000" && ballot_id != "0x"){
                header_info.innerHTML = ballot_id_header_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[id]]", web3.toAscii(ballot_id))
            }

            var is_donation = the_contract.ballots(current_ballot)[3]
            var candidatesMap = candidatesPerBallotMap.get('' + current_ballot)
            var i = 0
            var ipfs_hex = ""
            var donations = 0
            var number_candidates = the_contract.howManyCandidatesInBallot(current_ballot).toNumber()

            do{
                var candidate = the_contract.getCandidate(current_ballot, i)
                ipfs_hex = candidate[0]
                donations = candidate[1].toNumber()
                var ipfs = fromBytes32ToIPFS(ipfs_hex)
                if ((ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000") && candidatesMap && candidatesMap.get(ipfs)){
                    var party = candidatesMap.get(ipfs).party
                    var name = candidatesMap.get(ipfs).name
                    var photo = candidatesMap.get(ipfs).photo
                    candidates_tbody.innerHTML += donations_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[name]]", name).replace("[[party]]", party)
                        .replace("[[photo]]", photo).replace("[[donations]]", (is_donation? donations : "-")).replace("[[candidate_page_href]]", "http://localhost:8080/ipns/" + ipfs + "/profile")
                }
                i = i + 1
            }
            while (ipfs_hex != "0x0000000000000000000000000000000000000000000000000000000000000000" && i < number_candidates)

        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }

    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Displaying parties
function newPartiesPage(){
    if (current_campaign.id){
        if (the_contract){
            content_page.innerHTML = parties_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            party_photo_th.innerHTML = klang.party_photo_th
            party_name_th.innerHTML = klang.party_name_th
            party_url_th.innerHTML = klang.party_url_th

            var keys = partiesMap.keys()
            var values = partiesMap.values()
            var number_parties = partiesMap.size

            if (number_parties > 0){
                do{
                    var value = values.next()
                    var key = keys.next()

                    if (!key.done){
                        var ipfs = key.value
                        var url = value.value.url
                        var name = value.value.name
                        var photo = value.value.photo
                        parties_tbody.innerHTML += parties_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[name]]", name).replace("[[url]]", "<a href='" + url + "' target='_blank'>" + url.substring(0,40) + "</a>")
                            .replace("[[photo]]", photo).replace("[[party_page_href]]", "http://localhost:8080/ipns/" + ipfs + "/profile")
                    }
                }
                while (!key.done)
            }
        } else {
            content_page.innerHTML = cant_open_parties_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Displaying groups
function newGroupCategoriesPage(){
    if (current_campaign.id){
        if (the_contract){
            var has_block = the_contract.getVoter(web3.eth.coinbase)[4]

            if (has_block){
                var category = web3.toAscii(the_contract.groups(the_contract.getVoter(web3.eth.coinbase)[2].toNumber())[1])
                header_info.innerHTML = voter_group_header_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[category]]", category)
            }
            content_page.innerHTML = group_categories_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            group_category_description_th.innerHTML = klang.group_category_description_th
            group_category_id_th.innerHTML = klang.group_category_id_th
            enter_group_th.innerHTML = klang.enter_group_th

            var keys = gcategoriesMap.keys()
            var values = gcategoriesMap.values()
            var number_categories = gcategoriesMap.size

            if (number_categories > 0){
                var i = 0
                do{
                    var value = values.next()
                    var key = keys.next()

                    if (!key.done){
                        var id = key.value
                        var content = value.value.content
                        group_categories_tbody.innerHTML += group_categories_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[content]]", content).replace("[[group_button_text]]", klang.group_button_text).replace("[[group_button_id]]", "group_button_id_" + i).replace("[[id]]", id)
                        group_categories_select.innerHTML += group_categories_select_item_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[id]]", id)
                    }
                    i++
                }
                while (!key.done)

                if (has_block){
                    document.getElementById("enter_group_th").style.display = "none"
                }
                
                for (j=0; j < i - 1; j++){
                    if (has_block){
                        document.getElementById("group_button_id_" + j).style.display = "none"
                    } else {
                        document.getElementById("group_button_id_" + j).addEventListener("click", enterIntoGroup)
                    }
                }
            }
        } else {
            content_page.innerHTML = cant_open_parties_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Displaying questions
function newQuestionsPage(){
    if (current_campaign.id){
        if (the_contract){
            content_page.innerHTML = questions_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            question_topic_th.innerHTML = klang.question_topic_th
            question_content_th.innerHTML = klang.question_content_th

            var values = questionsMap.values()
            var number_questions = questionsMap.size

            if (number_questions > 0){
                do{
                    var value = values.next()

                    if (!value.done){
                        var topic = value.value.topic
                        var content = value.value.content
                        questions_tbody.innerHTML += questions_page_items_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[topic]]", topic).replace("[[content]]", content)
                    }
                }
                while (!value.done)
            }
        } else {
            content_page.innerHTML = cant_open_questions_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

//Send a vote with whisper
function vote(ev){
    var prefix = the_contract.getVoter(web3.eth.coinbase)[1].toNumber()
    var has_block = the_contract.getVoter(web3.eth.coinbase)[4]
    if (prefix == 0){
        Materialize.toast(klang.must_participate, 2500, 'rounded')
        return
    }
    if (!has_block){
        Materialize.toast(klang.must_enter_group, 2500, 'rounded')
        return
    }

    sendVoteMessage(ev.target.id.substring(15))
    setTimeout(newCandidatesPage, 1000)
}

//Send a donation with whisper
function donate(ev){
    var prefix = the_contract.getVoter(web3.eth.coinbase)[1].toNumber()
    var has_block = the_contract.getVoter(web3.eth.coinbase)[4]
    if (prefix == 0){
        Materialize.toast(klang.must_participate, 2500, 'rounded')
        return
    }
    if (!has_block){
        Materialize.toast(klang.must_enter_group, 2500, 'rounded')
        return
    }

    sendVoteMessage(ev.target.id.substring(17))
    setTimeout(newCandidatesPage, 1000)
}

//Voter should choose a group to enter
function enterIntoGroup(ev){
    var prefix = the_contract.getVoter(web3.eth.coinbase)[1].toNumber()
    if (prefix == 0){
        Materialize.toast(klang.must_participate, 2500, 'rounded')
        return
    }
    var index = ev.target.id.substring(16)
    var groups_name = Array.from(gcategoriesMap.keys())[index]
    var groups = ""
    if (jsonGroups[groups_name]){
        //Removing the last comma
        var text = jsonGroups[groups_name]
        text = text.substring(0, text.length)

        groups = jsonGroups[groups_name].split(",")
    } else {
        Materialize.toast(klang.no_groups_category, 2500, 'rounded')
        return
    }

    var positions_array = []
    for (i=0; i < groups.length; i++){
        var size = the_contract.groups(groups[i])[3].toNumber()

        if (size < the_contract.mgz().toNumber()){
            positions_array.push(i)
        }
    }

    //Adding some randomness to avoid clashes
    var position = positions_array[Math.floor(Math.random() * positions_array.length)]
    var places_array = []
    for (j=0; j < the_contract.mgz().toNumber(); j++){
        if (the_contract.getGroupVoters(position)[j] == "0x0000000000000000000000000000000000000000"){
            places_array.push(j)
        }
    }

    //Adding some randomness to avoid clashes (2)
    var place = places_array[Math.floor(Math.random() * places_array.length)]

    the_contract.addVoterToGroup(groups[position])
    the_contract.addVoterToGVoters(groups[position], place)

    openCampaignPage()
    //setTimeout(newGroupCategoriesPage, 10000) //How many seconds depends on how many peers
}

//Confirm the vote with whisper
function confirm(ok){
    var current_ballot = the_contract.currentBallot().toNumber()
    var group = the_contract.getVoter(web3.eth.coinbase)[2].toNumber()
    var position = 0
    var addresses = the_contract.getConfirmations(current_ballot, group)[0]
    for (m=0; m < addresses.length; m++){
        if (addresses[m] == "0x0000000000000000000000000000000000000000"){
            position = m
            break
        }
    }
    the_contract.confirm(current_ballot, position, ok)
}

//Displaying the user login
if (sessionStorage.getItem("kantcoin_org_user")){
    var user = sessionStorage.getItem("kantcoin_org_user")
    kantcoin_org_side_nav_user.innerHTML = user

    if(user.indexOf('@') > 0 && user.indexOf('.') > 0){
        user_icon.innerHTML = "email"
    } else if ((user.match(/-/g) || []).length == 1 && /^\d+$/.test(user.replace(/-/g,""))){
        user_icon.innerHTML = "phone_android"
    } else {
        user_icon.innerHTML = "credit_card"
    }
    user_chip.style = ""

} else {
    kantcoin_org_side_nav_user.innerHTML = ""
    user_chip.style = "display:none;"
}

//It checks if the seed is on the localStorage and the key is on the sessionStorage
//If the key is not there, then print a red key icon to alert the user
function checkKey(){
    if (!localStorage.getItem("kantcoin_org_words")) {
        vault_icon_container.innerHTML = vault_icon_container_html3.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[data-tooltip]]", klang.vault_closed)
        alertKey.innerHTML = ""
        return
    }
    if (!sessionStorage.getItem("kantcoin_org_key")){
        alertKey.innerHTML = floating_button_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[data-tooltip]]", klang.insert_password_again)
        vault_icon_container.innerHTML = vault_icon_container_html1.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[data-tooltip]]", klang.vault_opened_no_password)
    } else{
        alertKey.innerHTML = ""
        vault_icon_container.innerHTML = vault_icon_container_html2.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[data-tooltip]]", klang.vault_opened)
    }
    if (sessionStorage.getItem("kantcoin_org_user")){
        var user = sessionStorage.getItem("kantcoin_org_user")
        kantcoin_org_side_nav_user.innerHTML = user

        if(user.indexOf('@') > 0 && user.indexOf('.') > 0){
            user_icon.innerHTML = "email"
        } else if ((user.match(/-/g) || []).length == 1 && /^\d+$/.test(user.replace(/-/g,""))){
            user_icon.innerHTML = "phone_android"
        } else {
            user_icon.innerHTML = "credit_card"
        }
        user_chip.style = ""
    } else {
        kantcoin_org_side_nav_user.innerHTML = ""
        user_chip.style = "display:none;"
    }
}

function loadPassword(){
    //Getting the mnemonics from local storage
    var words = localStorage.getItem("kantcoin_org_words")
    //Getting the written password
    var password = kantcoin_org_password2.value
    //Getting the user
    var user =  kantcoin_org_user2.value
    //Setting the user in the sessionstorage
    sessionStorage.setItem("kantcoin_org_user",user)

    //Cleaning these fields
    kantcoin_org_password2.value = ""
    kantcoin_org_user2.value = ""

    if (!words || !password || !user){
        Materialize.toast(klang.error, 2000, 'rounded')
        return
    }

    //Generating new key
    generateKey(words, password, user)

    //Getting the key to check with the user login and the ekhash
    var key = sessionStorage.getItem("kantcoin_org_key")
    var ekhash = localStorage.getItem("kantcoin_org_ekhash")

    if (!checkuserNPassword(user,key, ekhash)){
        Materialize.toast(klang.wrong_password, 2500, 'rounded')
        return
    }

    //Hidding the pulsing button
    checkKey()

    //It reloads the profile page
    //Loading the user profile
    loadProfileHTML(myAccountMenuItemClick)
}

//It generates a file with the user's mnemonics and name
function saveVault(filename){
    //Getting the mnemonics from local storage
    var words = localStorage.getItem("kantcoin_org_words")
    //The data to be saved on the file
    var data = ""
    //The data must be encrypted
    var enc = ""
    //The chosen file
    var file = filename

    //If the file name was not received as a parameter, get it from the input
    if (!file || typeof filename !== 'string'){
        file = file_name1.value
    }
    //The user login and the key are necessary to generate the ekhash
    var user =  sessionStorage.getItem("kantcoin_org_user")
    var key = sessionStorage.getItem("kantcoin_org_key")

    //Cleaning this field
    file_name1.value = ""

    //Checking if there are words to be saved and if the file name was provided
    if (!words || !file || !user || !key){
        Materialize.toast(klang.no_vault_saved, 3000, 'rounded')
        return
    }

    //Creating Ekhash in order to check user login and password
    var ekhash = "" + hashCode(key + user)
    ekhash = ekhash.substr(ekhash.length > 4 ? 4 : 0)

    //The data should be formatted as a JSON string
    data = '{'
           + '"login_provider":' + '"' + localStorage.getItem("kantcoin_org_login_provider") + '",'
           + '"ekhash":' + '"' + ekhash + '"'
           + '}'
 
    //Encrypting the data
    enc = GibberishAES.enc(data,words)

    //Removing the prefix in order to difficult file location by this string
    //Saving the mnemonics and data
    var blob = new Blob([words + "\r\n" + enc.substr(10)], {type: "text/plain;charset=utf-8"})
    var objectUrl = URL.createObjectURL(blob)

    file_saver.href = objectUrl
    file_saver.download = file
    file_saver.click()

    file_saver.href = ''
    file_saver.download = ''
}

//It opens the file that constais the user's mnemonics and name
//Or the user may insert this data manually
function openVault(){
    //The data must be decrypted
    //var dec = ""
    //It is necessary to generate the keys
    var password = kantcoin_org_password1.value
    //For the ekhash
    var user = kantcoin_org_user1.value
    //Setting the user in the sessionstorage
    sessionStorage.setItem("kantcoin_org_user",user)

    //Checking if the user login, password and the words were given
    if (!file_data.kantcoin_org_words || !password || !user){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')

        //Cleaning the fields
        words_file.value = ""
        kantcoin_org_password1.value = ""
        words_file_button.value = ""
        kantcoin_org_user1.value = ""

        return
    }

    var words = file_data.kantcoin_org_words
    file_data.kantcoin_org_words = ""

    var m = new Mnemonic("english")

    var is_valid = m.check(words)

    //Checking if the mnemonics were valid
    if (is_valid){
        localStorage.setItem("kantcoin_org_words",words)
    } else {
        Materialize.toast(lang.browser_words_conflict, 4000, 'rounded')
        return
    }
    var data = file_data.kantcoin_org_data
    file_data.kantcoin_org_data = ""

    //Decrypting data
    var dec = GibberishAES.dec("U2FsdGVkX1" + data,words)

    //Generating the private and public keys and putting them in the sessionStorage
    generateKey(words, password, user)

    //Filling the localStorage
    loadFileData(dec)

    //Checking if the user and the password are correct (probably)
    if(!checkuserNPassword(user,sessionStorage.getItem("kantcoin_org_key"),localStorage.getItem("kantcoin_org_ekhash"))){
        Materialize.toast(klang.wrong_user_or_password, 3500, 'rounded')

        //Cleaning the fields
        words_file.value = ""
        kantcoin_org_password1.value = ""
        words_file_button.value = ""
        kantcoin_org_user1.value = ""

        return
    }

    //Cleaning the fields
    words_file.value = ""
    kantcoin_org_password1.value = ""
    words_file_button.value = ""
    kantcoin_org_user1.value = ""

    //Hidding the pulsing button
    checkKey()

    //It reloads the profile page
    //Loading the user profile
    loadProfileHTML(myAccountMenuItemClick)
}

function loadFileData(data_text){
    var jsonObj = JSON.parse(data_text)
    localStorage.setItem("kantcoin_org_login_provider",jsonObj.login_provider)
    localStorage.setItem("kantcoin_org_ekhash",jsonObj.ekhash)
}

//It gets the profile html from a request to the kserver
function loadProfileHTML(callback){
    //we should load the default page when the profile page does not exist
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        var parser = new DOMParser()
        var dom = parser.parseFromString(this.responseText.replace("<html>","").replace("</html>",""), "text/html")
        strip_tags(dom)
        profile_html = new XMLSerializer().serializeToString(dom)
        profile_html = profile_html.substr(profile_html.indexOf("<body>")+6, profile_html.lastIndexOf("</body>"))

        if(callback){
            callback(null)
        }
    })
    request.addEventListener("error", function() {
        profile_html = "ERROR"
        if(callback){
            callback(null)
        }
    })

    request.open('GET', "http://localhost:1985/queryGetProfile=" + getDir() + "/profile", true)
    request.send()
}

//The files related to some user vault is stored in an directory with this name
function getDir(){
    if (sessionStorage.getItem("kantcoin_org_aux_pubkey") && current_campaign.id){
        var hash = "" + hashCode(sessionStorage.getItem("kantcoin_org_aux_pubkey"))
        var small_hash = hash.substr(hash.length > 4 ? 4 : 0)

        return "k" + small_hash + "_" + current_campaign.id
    }
    return "kroot"
}

function closeVault(){
    localStorage.setItem("kantcoin_org_words","")
    sessionStorage.setItem("kantcoin_org_user","")
    sessionStorage.setItem("kantcoin_org_key","")
    sessionStorage.setItem("kantcoin_org_aux_pubkey","")
    localStorage.setItem("kantcoin_org_login_provider","")
    localStorage.setItem("kantcoin_org_ekhash","")
    localStorage.setItem("kantcoin_org_vote","")
    wallet = {}
    web3 = {}
    is_voter = false
    is_owner = false
    profile_html = ""
    the_contract = {}

    //Hidding the pulsing button...
    checkKey()

    //And the user chip
    kantcoin_org_side_nav_user.innerHTML = ""
    user_chip.style = "display:none;"

    //It reloads the profile page
    //Loading the user profile
    loadProfileHTML(myAccountMenuItemClick)
}

//It creates a new vault
function createVault() {
    var password3 = kantcoin_org_password3.value
    var password4 = kantcoin_org_password4.value
    var user = kantcoin_org_user3.value

    //Checking if empty
    if (!password3 || !password4 || !user){
        Materialize.toast(klang.empty_fields, 3500, 'rounded')

        //Cleaning the fields
        kantcoin_org_password3.value = ""
        kantcoin_org_password4.value = ""
        kantcoin_org_user3.value = ""

        return
    }

    //Checking if passwords match
    if (password3 != password4){
        Materialize.toast(klang.different_passwords, 3500, 'rounded')

        //Cleaning the fields
        kantcoin_org_password3.value = ""
        kantcoin_org_password4.value = ""
        kantcoin_org_user3.value = ""

        return
    }

    //Checking if the user format is correct
    if (!custom_provider){
        if ((user.match(/-/g) || []).length != 1 || !/^\d+$/.test(user.replace(/-/g,"")) || user.split("-")[0].length < 1 || user.split("-")[1].length < 4){
            Materialize.toast(klang.invalid_format, 3500, 'rounded')

            //Cleaning the fields
            kantcoin_org_password3.value = ""
            kantcoin_org_password4.value = ""
            kantcoin_org_user3.value = ""

            return
        }
    }

    //Verifying the password length
    if (password3.length < PASSWORD_LENGTH){
        Materialize.toast(klang.password_too_small, 4000, 'rounded')

        //Cleaning the fields
        kantcoin_org_password3.value = ""
        kantcoin_org_password4.value = ""
        kantcoin_org_user3.value = ""

        return
    }

    var m = new Mnemonic("english")

    // Generating new mnemonics
    var words = m.generate(128)

    //Using bitcoinjsb to generate a privatekey from the mnemonics and the password
    //This key is used to sign and verify ring signatures
    var keys = bitcoinjsb.keypairsFromMnemonic(words, password3, 3)
    var privkey = bs58.decode(keys[0].keyPair.toWIF()).toString("hex")

    var aux_signingkey = new ethers.SigningKey("0x" + privkey)
    var pubkey = aux_signingkey.publicKey.substring(2)
    var address = aux_signingkey.address.substring(2)

    //This will be used to generate all voter votes
    var keyjson = "{\"address\":\"" + address + "\",\"privkey\":\"" + privkey + "\",\"pubkey\":\"" + pubkey + "\"}"

    //Generating the aux_pkey
    var privkey2 = bs58.decode(keys[1].keyPair.toWIF()).toString("hex")
    var aux_signingkey2 = new ethers.SigningKey("0x" + privkey2)
    //This public key is used to generate the directory
    var aux_pkey = aux_signingkey2.publicKey.substring(2)

    //Setting the local/sessionStorage variables
    localStorage.setItem("kantcoin_org_words", words)
    sessionStorage.setItem("kantcoin_org_user", user)
    sessionStorage.setItem("kantcoin_org_key",keyjson)
    sessionStorage.setItem("kantcoin_org_aux_pubkey",aux_pkey)

    //Creating Ekhash in order to check user login and password
    var ekhash = "" + hashCode(keyjson + user)
    ekhash = ekhash.substr(ekhash.length > 4 ? 4 : 0)

    //Setting the ekhash in the localStorage
    localStorage.setItem("kantcoin_org_ekhash", ekhash)

    //Generating new wallet from the mnemonics, user, and password
    ethers.Wallet.fromBrainWallet(words, user + password3).then(function(the_wallet) {
        wallet = the_wallet
        sessionStorage.setItem("kantcoin_org_wallet", JSON.stringify(wallet))

        //Initializing the blockchain
        if (current_campaign.id){
            initBlockchain()
        }
    })

    //Refreshing the screen with the new key and user
    checkKey()

    //Cleaning the fields
    kantcoin_org_password3.value = ""
    kantcoin_org_password4.value = ""
    kantcoin_org_user3.value = ""

    //It reloads the profile page
    loadProfileHTML(myAccountMenuItemClick)
}

//It sends the public key and the user id to the login provider
function sendVault(){
    var user = sessionStorage.getItem("kantcoin_org_user")

    if(!user || !wallet.address){
        Materialize.toast(lang.no_vault_opened, 3000, 'rounded')
        return
    }

    var x = (screen.width / 2) - 220
    var y = (screen.height / 2) - 300
    if (login_provider.value){
        if(isValidURL(login_provider.value)){
            child = window.open("", "_blank", "width=440,height=600,top=" + y + ",left=" + x +
                ",resizable=no,status=no,menubar=no,scrollbars=no,titlebar=no,toolbar=no")
            child.opener = null
            child.location.assign(login_provider.value + "/new.html?pkey=" + wallet.address + "&id=" + user)
        } else{
            Materialize.toast(lang.invalid_login_provider, 3000, 'rounded')
        }
    } else {
        child = window.open("", "_blank", "width=440,height=600,top=" + y + ",left=" + x +
            ",resizable=no,status=no,menubar=no,scrollbars=no,titlebar=no,toolbar=no")
        child.opener = null
        child.location.assign("https://kantcoin.com/new.html?pkey=" + wallet.address + "&id=" + user)
    }
}

//It generates the main key and the aux public key
function generateKey(words, password, user){
    //Using bitcoinjsb to generate a privatekey from the mnemonics and the password
    //This key is used to sign and verify ring signatures
    var keys = bitcoinjsb.keypairsFromMnemonic(words, password, 3)
    var privkey = bs58.decode(keys[0].keyPair.toWIF()).toString("hex")

    var aux_signingkey = new ethers.SigningKey("0x" + privkey)
    var pubkey = aux_signingkey.publicKey.substring(2)
    var address = aux_signingkey.address.substring(2)

    var keyjson = "{\"address\":\"" + address + "\",\"privkey\":\"" + privkey + "\",\"pubkey\":\"" + pubkey + "\"}"

    //Generating the aux_pkey
    var privkey2 = bs58.decode(keys[1].keyPair.toWIF()).toString("hex")
    var aux_signingkey2 = new ethers.SigningKey("0x" + privkey2)
    //This public key is used to generate the directory
    var aux_pkey = aux_signingkey2.publicKey.substring(2)

    //The key is stored in window.sessionStorage for user security (less time exposed)
    sessionStorage.setItem("kantcoin_org_key",keyjson)
    sessionStorage.setItem("kantcoin_org_aux_pubkey",aux_pkey)

    //Generating new wallet from the mnemonics, user, and password
    ethers.Wallet.fromBrainWallet(words, user + password).then(function(the_wallet) {
        wallet = the_wallet
        sessionStorage.setItem("kantcoin_org_wallet", JSON.stringify(wallet))

        //Initializing the blockchain
        if (current_campaign.id){
            initBlockchain()
        }
    })
}

//It reads the mnemonics and the encrypted data
function readTextFile(event){
    var input = event.target
    var reader = new FileReader()

    //Cleaning these variables
    file_data.kantcoin_org_data = ""
    file_data.kantcoin_org_words = ""

    reader.addEventListener("load", function(){
        var text = reader.result
        var split = text.split("\r\n")

        //There are only two lines in this file
        if (split.length == 2){
            file_data.kantcoin_org_words = split[0]
            file_data.kantcoin_org_data = split[1]
        }
    })
    reader.readAsText(input.files[0])
}

//It uses hashcodes to check if the password and user login are corrects
function checkuserNPassword(user, key, ekhash){
    var hash = "" + hashCode(key + user)
    hash = hash.substr(ekhash.length > 4 ? 4 : 0)
    if (hash == ekhash){
        return true
    }
    return false
}

function hashCode(str) {
    var hash = 0, i, chr
    if (str.length === 0) return hash
    for (i = 0; i < str.length; i++) {
        chr   = str.charCodeAt(i)
        hash  = ((hash << 5) - hash) + chr
        hash |= 0 // Convert to 32bit integer
    }
    return hash
}

//Event Listeners
close_vault_link.addEventListener("click",closeVault)
words_file_button.addEventListener("change", function (event){
    var input = event.target
    var reader = new FileReader()

    //Cleaning these variables
    file_data.kantcoin_org_data = ""
    file_data.kantcoin_org_words = ""

    reader.addEventListener("load", function(){
        var text = reader.result
        var split = text.split("\r\n")

        //There are only two lines in this file
        if (split.length == 2){
            file_data.kantcoin_org_words = split[0]
            file_data.kantcoin_org_data = split[1]
        }
    })
    reader.readAsText(input.files[0])
})
modal1_open.addEventListener("click", openVault)
modal2_save.addEventListener("click", saveVault)
modal3_ok.addEventListener("click", loadPassword)
modal4_confirm.addEventListener("click", createVault)
modal5_send.addEventListener("click", sendVault)

//Obtain new chainid from login/campaign provider then insert the campaign into the blockchain
create_campaign_button.addEventListener("click", createCampaign)
//Verify if the voter meets the requirements then register him/her
register_voter_link.addEventListener("click", registerVoter)

//These functions paint the password underline red in case of wrong password input
kantcoin_org_password4.addEventListener("focusout", function () {
    if (kantcoin_org_password4.value && kantcoin_org_password3.value){
        if (kantcoin_org_password3.value != kantcoin_org_password4.value || kantcoin_org_password4.value < PASSWORD_LENGTH){
            kantcoin_org_password4.style = "border-bottom: 1px solid red;"
        } else {
            kantcoin_org_password4.style = "border-bottom: 1px solid green;"
        }
    } else {
        kantcoin_org_password4.style = "border-bottom: 1px bold grey;"
    }
})
kantcoin_org_password4.addEventListener("mouseout", function () {
    if (kantcoin_org_password4.value && kantcoin_org_password3.value){
        if (kantcoin_org_password3.value != kantcoin_org_password4.value || kantcoin_org_password4.value < PASSWORD_LENGTH){
            kantcoin_org_password4.style = "border-bottom: 1px solid red;"
        } else {
            kantcoin_org_password4.style = "border-bottom: 1px solid green;"
        }
    } else {
        kantcoin_org_password4.style = "border-bottom: 1px bold grey;"
    }

})
kantcoin_org_password3.addEventListener("focusout", function () {
    if (kantcoin_org_password3.value){
        if (kantcoin_org_password3.value.length >= PASSWORD_LENGTH){
            kantcoin_org_password3.style = "border-bottom: 1px solid bluegreen;"
        } else {
            kantcoin_org_password3.style = "border-bottom: 1px solid red;"
        }
    } else {
        kantcoin_org_password3.style = "border-bottom: 1px bold grey;"
    }
})
kantcoin_org_password3.addEventListener("mouseout", function () {
    if (kantcoin_org_password3.value){
        if (kantcoin_org_password3.value.length >= PASSWORD_LENGTH){
            kantcoin_org_password3.style = "border-bottom: 1px solid bluegreen;"
        } else {
            kantcoin_org_password3.style = "border-bottom: 1px solid red;"
        }
    } else {
        kantcoin_org_password3.style = "border-bottom: 1px bold grey;"
    }
})

//For custom provider, queries and so on
function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href
    }
    name = name.replace(/[\[\]]/g, "\\$&")
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url)
    if (!results) {
        return null
    }
    if (!results[2]) {
        return ''
    }
    return decodeURIComponent(results[2].replace(/\+/g, " "))
}

function isValidURL(url) {
    if (url && url.indexOf("https://") == 0 && url.indexOf("\\") < 0 && (url.match(/\//g) || []).length == 2){
        return true
    }
    return false
}

//These functions above 'clean' the profile html
function strip_tags (dom) {
    var elements = dom.getElementsByTagName("*")

    for (var i = elements.length; i-->0;){
        if (['div','table','h1','h2','h3','h4','h5','h6','a','li','ul','ol','p','b','i','u','span','br','td','tr','tbody','th','thead','img', 'body', 'head', 'html', 'pre', 'hr', 'blockquote', 'video', 'source', 'audio'].indexOf(elements[i].tagName.toLowerCase()) < 0){
            elements[i].parentNode.removeChild(elements[i])
        } else {
            removeAllAttrs(elements[i])
            strip_tags(elements[i])
        }
    }
}

function removeAllAttrs(element) {
    for (var i= element.attributes.length; i-->0;){
        if (['href','style','class','color ','target','data-filename','src', 'type', 'width', 'height', 'controls', 'alt'].indexOf(element.attributes[i].name.toLowerCase()) < 0){
            element.removeAttributeNode(element.attributes[i])
        } else if (element.attributes[i].name.toLowerCase() == 'href'){
            var address = element.attributes[i].value.toLowerCase()
            if ((!address.indexOf("https://") == 0 && !address.indexOf("http://") == 0)||address.indexOf("localhost") >= 0 || address.indexOf("127.0.0.1") >= 0 || address.indexOf("(") >= 0){
                element.removeAttributeNode(element.attributes[i])
            }
        }  else if (element.attributes[i].name.toLowerCase() == 'style'){
            var style = element.attributes[i].value.toLowerCase()
            if (style.indexOf("url") >= 0 || style.indexOf("absolute") >= 0){
                element.removeAttributeNode(element.attributes[i])
            }
        }   else if (element.attributes[i].name.toLowerCase() == 'class'){
            var the_class = element.attributes[i].value.toLowerCase()
            if (the_class.toLowerCase().indexOf("responsive-table") < 0 || the_class.toLowerCase().indexOf("responsive-img")){
                element.removeAttributeNode(element.attributes[i])
            }
        }  else if (element.attributes[i].name.toLowerCase() == 'target'){
            element.attributes[i].value = "_blank"
        }
    }
}

//It verifies if the profile exists for the current campaign
function ifProfileExists(callback){
    if (getDir() == "kroot"){
        profile_exists = false
        return
    }
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        var exists = this.responseText
        if (exists == "true"){
            profile_exists = true
            callback()
        } else {
            profile_exists = false
        }
    })
    request.open('GET', "http://localhost:1985/queryProfileExists=" + getDir(), true)
    request.send()
}

//Sending the profile html to kserver
function saveProfile(){
    //if someway this function was called without the campaign being set
    if (!current_campaign.id){
        Materialize.toast(klang.no_campaign_found, 3000, 'rounded')
        return
    }

    var content = ""
    if (editor && $('#editor').materialnote('code')){
        content =  $('#editor').materialnote('code')

        if (content.length > 10000){
            Materialize.toast(klang.heavy_file, 4500, 'rounded')
            return
        }
        var request = new XMLHttpRequest()
        request.addEventListener("load", function() {
            loadProfileHTML(myAccountMenuItemClick)
        })

        //Cleaning the content
        var parser = new DOMParser()
        var dom = parser.parseFromString(content, "text/html")
        strip_tags(dom)
        content = new XMLSerializer().serializeToString(dom)
        content = content.substr(content.indexOf("<body>")+6, content.lastIndexOf("</body>") - (content.indexOf("<body>")+6))
        var content_url = content.replace(/\?/g, QUESTION_MARK)
        content_url = content_url.replace(/#/g, HASHTAG)
        content_url = content_url.replace(/"/g, DOUBLEQUOTE)
        content_url = content_url.replace(/'/g, QUOTE)
        content_url = "<html>" + content_url + "</html>"

        request.open('GET', "http://localhost:1985/queryAddProfile=" + getDir() + THE_AND + content_url + THE_AND + "profile", true)
        request.send()
        showPreloader(klang.wait_saving_profile)
    }
}

//Instantiate web3 after running geth
function instantiateWeb3(){
    if (!web3.eth){
        web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))

        //Obtaining the enode without the ip
        whatIsMyEnode()
    }
    if (web3.eth && the_callback){
        the_callback()
        the_callback = ""
    }
}

//Call: geth --networkid "1151985..." etc...
function runBlockChain(callback){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        var resp = this.responseText

        if (resp == "complete"){
            var request2 = new XMLHttpRequest()
            request2.addEventListener("load", function() {
                var resp2 = this.responseText

                if (resp2 == "complete"){
                    //Instantiate web3 after running geth
                    the_callback = callback
                    setTimeout(instantiateWeb3, 5000)
                    setTimeout(listenWhisperMessages, 15000)
                }
            })

            //Secondly, run the blockchain
            request2.open('GET', "http://localhost:1985/queryRunBlockchain=1151985" + current_campaign.id + THE_AND + wallet.address.substring(2).toLowerCase() + THE_AND + getDir(), true)
            request2.send()
        }
    })

    //Firstly create the pwd file
    var pwd = sessionStorage.getItem("kantcoin_org_user") + hashCode(sessionStorage.getItem("kantcoin_org_key"))
    request.open('GET', "http://localhost:1985/queryCreatePwdFile=" + getDir() + THE_AND + pwd, true)
    request.send()
}

//Insert a new account with the command geth account import. In order to do that, create new privatekey and password file.
function insertAccountIntoBlockchain(callback){
    var request = new XMLHttpRequest()

    request.addEventListener("load", function() {
        var resp = this.responseText

        if (resp == "complete" && callback){
            runBlockChain(callback)
        }
    })
    //The password to unlock the main account
    var pwd = sessionStorage.getItem("kantcoin_org_user") + hashCode(sessionStorage.getItem("kantcoin_org_key"))
    request.open('GET', "http://localhost:1985/queryInsertAccountIntoBlockchain=" + getDir() + THE_AND + wallet.privateKey.substring(2).toLowerCase() + THE_AND + pwd, true)
    request.send()
}

//Create a new account and then insert the account address into the genesis file
function setBlockChain(callback){
    var request = new XMLHttpRequest()

    request.addEventListener("load", function() {
        var resp = this.responseText
        if (resp == "complete"){
            insertAccountIntoBlockchain(callback)
        }
    })

    //The nonce is generated from the country (cannot be changed) and id
    var hash = hashCode(current_campaign.country + current_campaign.id)
    if (hash < 0){
        hash = hash * -1
    }
    //Query is composed of: first - chainid, second - ethereum address, third - enode, fourth- the directory, fifth - nonce
    request.open('GET', "http://localhost:1985/querySetBlockchain=1151985" + current_campaign.id + THE_AND + wallet.address.substring(2).toLowerCase() + THE_AND + rand_enodes + THE_AND + getDir() + THE_AND + hash, true)
    request.send()
}

//Verify if the genesis file, with the same content, already exists. If it does not exist, then call setBlockChain. However, if it does exist, run the blockchain
//Deletedirs tells if the server should delete blockchain directories in the event of a different genesis file
function initBlockchain(callback, deletedirs) {
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        var exists = this.responseText
        if (exists != "true"){
            setBlockChain(callback)
        } else {
            runBlockChain(callback)
        }
    })
    //The nonce is generated from the country (cannot be changed) and id
    var hash = hashCode(current_campaign.country + current_campaign.id)
    if (hash < 0){
        hash = hash * -1
    }
    //Query is composed of: first - chainid, second - ethereum address, third - enode, fourth- the directory, fifth - nonce
    request.open('GET', "http://localhost:1985/queryVerifyBlockchain=1151985" + current_campaign.id + THE_AND + wallet.address.substring(2).toLowerCase() + THE_AND + "12345" + THE_AND + getDir() + THE_AND + hash + THE_AND + deletedirs, true)
    request.send()
}

//Search for candidates, questions, campaigns, parties, groups etc.
function searchFor(){
    if (current_search == "campaigns"){
        var s = search.value
        if (!s || isNaN(s)){
            Materialize.toast(klang.wrong_campaign_id, 4500, 'rounded')
        } else if (s != current_campaign.id){
            is_voter = false
            is_owner = false
            use_ipfs_io = false
            showPreloader(klang.wait_searching_campaign)
            updateCurrentCampaign(s)
            //Initially, the user is not allowed to interact with the campaign
        } else {
            Materialize.toast(klang.same_campaign, 2000, 'rounded')
        }
    }
}

//Open the ipns file containing campaign information
function updateCurrentCampaign(id){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        var ipns = this.responseText
        if(ipns != "error" && ipns != "no campaign"){
            var request2 = new XMLHttpRequest()
            request2.addEventListener("load", function (ev) {
                var jsonObj = JSON.parse(this.responseText)
                current_campaign.id = id
                current_campaign.name = jsonObj.name
                current_campaign.ipns = ipns
                current_campaign.description = jsonObj.description
                current_campaign.country = jsonObj.country
                current_campaign.period = jsonObj.period
                current_campaign.image = jsonObj.image
                current_campaign.link = jsonObj.link
                current_campaign.address = jsonObj.address
                current_campaign.contract = jsonObj.contract
                current_campaign.whisper = jsonObj.whisper
                current_campaign.regexp = jsonObj.regexp

                localStorage.setItem("kantcoin_org_current_campaign", JSON.stringify(current_campaign))
                $("#campaign_info_menu_item").click()
                //Changing the profile for that campaign
                loadProfileHTML()
                openCampaignContract()
                loadCandidates(current_campaign.ipns)
                loadQuestions(current_campaign.ipns)
                loadParties(current_campaign.ipns)
                loadGroupCategories(current_campaign.ipns)
            })
            request2.open('GET', (use_ipfs_io ? "https://ipfs.io/ipns/" : "http://localhost:8080/ipns/") + ipns + "/profile")
            request2.send()
        } else if(ipns != "no campaign") {
            $("#campaign_info_menu_item").click()
            content_page.innerHTML = klang.no_campaign_found
            header_info.innerHTML = ""
        } else {
            $("#campaign_info_menu_item").click()
            content_page.innerHTML = klang.error_during_search
            header_info.innerHTML = ""
        }
    })
    request.open('GET', "http://localhost:1985/queryGetCampaign=" + id + THE_AND + (custom_provider ? custom_provider : "https://zak7n89d31.execute-api.us-west-2.amazonaws.com/prod"), true)
    request.send()
}

//Fill in the fields with current_campaign data
function openCampaignPage(){
    document.title = (current_campaign.name ? current_campaign.name : klang.campaign_info)

    var user = sessionStorage.getItem("kantcoin_org_user")
    if (current_campaign.id && user){
        if (!is_voter){
            header_info.innerHTML = enter_campaign_button_html1.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            enter_campaign_container.innerHTML = klang.not_entered
        } else {
            header_info.innerHTML = enter_campaign_button_html2.innerHTML.replace("<!--[CDATA[","").replace("-->","")
            entered_container.innerHTML = klang.entered
        }
        if (is_owner){
            header_info.innerHTML = campaign_admin_button_html.innerHTML.replace("<!--[CDATA[","").replace("-->","") + header_info.innerHTML
            campaign_admin_container.innerHTML = klang.admin

            campaign_admin_candidates_li.style.display = ""
            campaign_admin_parties_li.style.display = ""
            campaign_admin_questions_li.style.display = ""
            campaign_admin_ballots_li.style.display = ""
            campaign_admin_groups_li.style.display = ""

            //Adding listener to the modal7 trigger(admin campaign page)
            campaign_admin_button.addEventListener("click", function () {
                var current_ballot = the_contract.currentBallot().toNumber()
                current_ballot_mark.innerHTML = web3.toAscii(the_contract.ballots(current_ballot)[0]).trim()

                loadGroupCategories(current_campaign.ipns)
                group_categories_select.innerHTML = ""
                var keys = gcategoriesMap.keys()
                var values = gcategoriesMap.values()
                var number_categories = gcategoriesMap.size

                if (number_categories > 0){
                    var i = 0
                    do{
                        var value = values.next()
                        var key = keys.next()

                        if (!key.done){
                            var id = key.value
                            var content = value.value.content
                            group_categories_select.innerHTML += group_categories_select_item_html.innerHTML.replace("<!--[CDATA[","").replace("-->","").replace("[[id_value]]", id).replace("[[id_text]]", id)
                        }
                        i++
                    }
                    while (!key.done)

                    $("#group_categories_select").material_select()
                }
            })
        } else if (the_contract){
            header_info.innerHTML = collaborate_button_html.innerHTML.replace("<!--[CDATA[","").replace("-->","") + header_info.innerHTML
            collaborate_container.innerHTML = klang.collaborate
            campaign_admin_title.innerHTML = klang.collaborate_title

            //Adding listener to the modal7 trigger(admin campaign page)
            collaborate_button.addEventListener("click", function () {
                campaign_admin_candidates_li.style.display = "none"
                campaign_admin_parties_li.style.display = "none"
                campaign_admin_questions_li.style.display = "none"
                campaign_admin_ballots_li.style.display = "none"
                campaign_admin_groups_li.style.display = "none"
            })
        }
    }
    content_page.innerHTML = open_campaign_page_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")

    campaign_card_image.src = (current_campaign.image? current_campaign.image: "http://localhost:1985/imgs/no-image-icon.png")
    campaign_basic_info_container.innerHTML = klang.campaign_basic_info
    campaign_name_container.innerHTML = klang.name + ":&nbsp;&nbsp;"
    current_campaign_name_container.innerHTML = current_campaign.name
    campaign_description_container.innerHTML = klang.description + ":&nbsp;&nbsp;"
    current_campaign_description_container.innerHTML = current_campaign.description
    campaign_country_container.innerHTML = klang.country + ":&nbsp;&nbsp;"
    current_campaign_country_container.innerHTML = current_campaign.country
    campaign_period_container.innerHTML = klang.period + ":&nbsp;&nbsp;"
    current_campaign_period_container.innerHTML = (current_campaign.period ? current_campaign.period : "")
    current_campaign_link.href = (current_campaign.link ? current_campaign.link : "#")
    current_campaign_link.target = (current_campaign.link ? "_blank" : "")
    external_link_container.innerHTML = klang.external_link
    campaign_technical_info_container.innerHTML = klang.campaign_technical_info
    campaign_id_container.innerHTML = klang.campaign_id + ":&nbsp;&nbsp;"
    chainid_container.innerHTML = klang.chainid + ":&nbsp;&nbsp;"
    ipns_address_container.innerHTML = klang.ipns_address + ":&nbsp;&nbsp;"
    ethereum_address_container.innerHTML = klang.ethereum_address + ":&nbsp;&nbsp;"
    contract_address_container.innerHTML = klang.contract_address + ":&nbsp;&nbsp;"
    whisper_container.innerHTML = klang.whisper + ":&nbsp;&nbsp;"
    current_campaign_id_container.innerHTML = current_campaign.id
    current_chainid_container.innerHTML = "1151985" + current_campaign.id
    current_ipns_address_container.innerHTML = current_campaign.ipns
    current_ethereum_address_container.innerHTML = current_campaign.address
    current_contract_address_container.innerHTML = current_campaign.contract
    current_whisper_container.innerHTML = current_campaign.whisper.substring(0,50) + "..."

    //Displaying all the content when "mouseenter"
    current_whisper_container.addEventListener("mouseenter", function () {
        current_whisper_container.innerHTML = current_campaign.whisper
    })
    current_whisper_container.addEventListener("mouseout", function () {
        current_whisper_container.innerHTML = current_campaign.whisper.substring(0,50) + "..."
    })
    //initialize this collapsible
    $('#campaign_collapsible').collapsible()

    if (web3 && web3.eth){
        //Address to be used as group chairperson
        address_to_inform_label.innerHTML = web3.eth.coinbase
    }
}

window.onerror = function() {
    //Stops preloader on error
    if (content_page.innerHTML == preloader_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")){
        if (!use_ipfs_io && header_title.innerHTML == klang.wait_searching_campaign){
            use_ipfs_io = true
            var s = search.value
            updateCurrentCampaign(s)
        } else {
            myAccountMenuItemClick()
            Materialize.toast(klang.error, 2000, 'rounded')
        }
    }
}

//This function is called after searches/campaign creation
function showPreloader(title){
    header_title.innerHTML = title
    header_info.innerHTML = ""
    content_page.innerHTML = preloader_html.innerHTML.replace("<!--[CDATA[","").replace("-->","")
}

/*
//Verify whether the user may interact with this campaign or not
function enterCampaign(){
    var user = sessionStorage.getItem("kantcoin_org_user")
    if (!user || !wallet.address ){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')
        return
    }
    if (!current_campaign.id){
        Materialize.toast(klang.no_campaign_opened, 3000, 'rounded')
        return
    }
    //Changing the header button content
    initBlockchain(openCampaignContract, "true")
}
*/

//Obtain new campaignid from login/campaign provider then insert the campaign into the blockchain
function createCampaign(){
    var user = sessionStorage.getItem("kantcoin_org_user")
    var key = sessionStorage.getItem("kantcoin_org_key")
    if (!user || !wallet.address || !key){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')
        return
    }
    showPreloader(klang.wait_few_minutes)
    var campaignid = generateCampaignid()

    current_campaign.id = campaignid
    current_campaign.address = wallet.address
    current_campaign.name = campaign_name_input.value
    current_campaign.description = campaign_description_input.value
    current_campaign.image = image_input.value
    current_campaign.link = campaign_external_page_input.value
    current_campaign.country = country_select.value
    current_campaign.period = initial_date_input.value + " - " + final_date_input.value
    if (regexp_input.value){
        current_campaign.regexp = regexp_input.value
    } else {
        current_campaign.regexp = "/\\b" + prefix_voters_input.value + "\\S*\\s?/g"
    }

    // This sets the current_campaign.ipns
    obtainIPNS(campaignid)
}

//Called after obtaining campaign address
function continueCampaignCreation(){
    var user = sessionStorage.getItem("kantcoin_org_user")

    //Signing a message with the user's private key
    var aux_wallet = new ethers.Wallet(wallet.privateKey)
    var message = "" + Date.now() + "-" + current_campaign.id
    var signature = aux_wallet.signMessage(message)

    //The user address for verifying the ownership of the campaign
    var user_address = wallet.address

    //Sending the campaign to the campaigns provider
    var request2 = new XMLHttpRequest()
    request2.addEventListener("load", function (ev) {
        if (this.responseText == "complete"){
            //Creating ipfs profile page for the campaign
            var content = JSON.stringify(current_campaign)
            var content_url = content.replace(/\?/g, QUESTION_MARK)
            content_url = content_url.replace(/#/g, HASHTAG)
            content_url = content_url.replace(/"/g, DOUBLEQUOTE)
            content_url = content_url.replace(/'/g, QUOTE)
            var request3 = new XMLHttpRequest()
            request3.addEventListener("load", function (ev) {
                if (this.responseText == "complete"){
                    //Initializing the blockchain to start a new campaign
                    initBlockchain(insertCampaign, "true")
                    setTimeout(storeEnode, 15000)
                }
            })
            request3.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "profile", true)
            request3.send()
        } else {
            current_campaign.id = ""
            current_campaign.name = ""
            current_campaign.description = ""
            current_campaign.image = ""
            current_campaign.link = ""
            current_campaign.country = ""
            current_campaign.period = ""
            current_campaign.ipns = ""
            current_campaign.address = ""
            current_campaign.contract = ""
            current_campaign.whisper = ""
            current_campaign.regexp = ""
        }
    })
    request2.open('GET', "http://localhost:1985/queryAddCampaignIntoProvider=" + current_campaign.id + THE_AND + user + THE_AND + current_campaign.ipns + THE_AND + user_address + THE_AND + message + THE_AND + signature + THE_AND + current_campaign.address + THE_AND + (custom_provider ? custom_provider : "https://zak7n89d31.execute-api.us-west-2.amazonaws.com/prod"), true)
    request2.send()

    createEmptyFiles()
    clearCreateCampaignFields()
}

//Questions and parties files
function createEmptyFiles(){
    var request = new XMLHttpRequest()
    request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "empty" + THE_AND + "questions", true)
    request.send()
    var request2 = new XMLHttpRequest()
    request2.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "empty" + THE_AND + "parties", true)
    request2.send()
    var request3 = new XMLHttpRequest()
    request3.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "empty" + THE_AND + "candidates_ballot0", true)
    request3.send()
    var request4 = new XMLHttpRequest()
    request4.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "empty" + THE_AND + "group_categories", true)
    request4.send()
    var request4 = new XMLHttpRequest()
    request4.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "empty" + THE_AND + "enodes", true)
    request4.send()
    var request5 = new XMLHttpRequest()
    request5.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + "{}" + THE_AND + "groups", true)
    request5.send()
}

//Verify if the voter meets the requirements then register him/her
function registerVoter(){
    var user = sessionStorage.getItem("kantcoin_org_user")
    if (!user || !wallet.address){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')
        return
    }
    if (!current_campaign.id || !the_contract){
        Materialize.toast(klang.no_campaign_opened, 3000, 'rounded')
        return
    }
    if (checkVoterRequirements()){
        sendRegisterUserMessage()
    }
}

//The contract to interact with this campaign
function openCampaignContract() {
    if (web3.eth && current_campaign.contract){
        setTheContract()

        //Check if the user is a voter in this campaign
        if (checkVoterRequirements()){
            is_voter = true
        }

        //If the campaign owner's whisper is the same as the user's whisper, he or she is the owner of the campaign
        if (checkOwner()){
            is_owner = true
        }
    }
}

//Request the login/campaign provider a new campaignid
function generateCampaignid() {
    return "" + Math.floor(Date.now() / 100)
}

//Obtain this information with the server
function obtainIPNS(id) {
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText != "error") {
            var request2 = new XMLHttpRequest()
            request2.addEventListener("load", function() {
                if (this.responseText != "error") {
                    current_campaign.ipns = this.responseText
                    //Continuing campaign creation
                    continueCampaignCreation()
                }
            })
            request2.open('GET', "http://localhost:1985/queryGetIPNS=" + id, true)
            request2.send()
        }
    })
    request.open('GET', "http://localhost:1985/queryAddIPNSKey=" + id, true)
    request.send()
}

//Create a transaction to insert the campaign in the blockchain
function insertCampaign() {
    var v_rounds = (votation_rounds_select.value? votation_rounds_select.value : 2)
    var d_rounds = (donation_rounds_select.value? donation_rounds_select.value : 1)
    var campaignContract = web3.eth.contract(CAMPAIGN_CONTRACT)
    var campaign = campaignContract.new(
        v_rounds,
        d_rounds,
        {
            from: web3.eth.accounts[0],
            data: CONTRACT_DATA,
            gas: '10000000'
        }, function (e, contract){
            console.log(e, contract)
            if (typeof contract.address !== 'undefined') {
                console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash)
                the_contract = contract
                current_campaign.contract = contract.address //contract.address.substring(2).toLowerCase()

                //Getting the Whisper public key to receive voters' requests
                var id = web3.shh.addPrivateKey(wallet.privateKey)
                current_campaign.whisper = web3.shh.getPublicKey(id)

                //Re-inserting campaign profile page into IPFS
                var content = JSON.stringify(current_campaign)
                var content_url = content.replace(/\?/g, QUESTION_MARK)
                content_url = content_url.replace(/#/g, HASHTAG)
                content_url = content_url.replace(/"/g, DOUBLEQUOTE)
                content_url = content_url.replace(/'/g, QUOTE)
                var request = new XMLHttpRequest()
                request.addEventListener("load", function (ev) {
                    if (this.responseText == "complete"){
                        //Since it is the last step of the campaign creation, update te current campaign to display it to the user
                        updateCurrentCampaign(current_campaign.id)
                    }
                })
                request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "profile", true)
                request.send()
            }
        })
 }

//Check whether the voter meets the requirements or not
function checkVoterRequirements(user) {
    if (!user){
        //This method can be called to register the current user, or to register users through Whisper messages request
        user = sessionStorage.getItem("kantcoin_org_user")
    }
    if (current_campaign.regexp){
        var regexp = new RegExp(current_campaign.regexp.split("/")[1], current_campaign.regexp.split("/")[2])
        if (regexp.test(user)){
            return true
        }
    }
    return false
}

//Check if the user is the owner of the current campaign
function checkOwner() {
    if (the_contract && wallet.address){
        var chairperson = the_contract.chairperson()
        return (chairperson == web3.eth.coinbase)
    }
    return false
}

//Check the messages received via Whisper
function listenWhisperMessages() {
    if (web3.shh) {
        if (the_contract && the_contract.getWhisper(web3.eth.coinbase)[0] == "0x0000000000000000000000000000000000000000000000000000000000000000"){
            addWhisperAddressIntoBlockchain()
        }

        var filter_data = {
            topics: [web3.fromAscii(REGISTER_VOTER), web3.fromAscii(VOTE)],
            privateKeyID: web3.shh.addPrivateKey(wallet.privateKey)
        }
        var filter = web3.shh.newMessageFilter(filter_data)
        watchWhisper = filter.watch(function (error, result) {
            if (!error && listen_whisper){
                if (web3.toAscii(result.topic) == REGISTER_VOTER){
                    //Payload is composed of user, address, public_key, and signature(user)
                    readRegisterVoterMessage(web3.toAscii(result.payload))
                } else if (web3.toAscii(result.topic) == VOTE){
                    //Payload is composed of ballot, proposal, group, vote (VOTE + ":" + campaign id + ":" + ballot), and signature(vote)
                    readVoteMessage(web3.toAscii(result.payload))
                } else if (web3.toAscii(result.topic) == STORE_ENODE)
                    //It stores the enode of some group chairperson
                    var json_payload = JSON.parse(web3.toAscii(result.payload))
                    if ((ethers.Wallet.verifyMessage(current_campaign.id, json_payload.signature) == json_payload.address) && authorized_chairpersons.includes(json_payload.address)){
                        storeEnode(json_payload.enode)
                    }
            } else {
                console.log(error)
            }
        })
    }
}

//Reading register voter messages and then calling the giveRightToVote contract function
//Payload is composed of user, address, pubkey, and signature(campaign id)
function readRegisterVoterMessage(payload){
    var json_payload = JSON.parse(payload)
    if (json_payload.user && json_payload.signature && json_payload.address && json_payload.pubkey
        && checkVoterRequirements(json_payload.user) && (ethers.Wallet.verifyMessage(current_campaign.id, json_payload.signature) == json_payload.address)){
        var request = new XMLHttpRequest()
        request.addEventListener("load", function (ev) {
            if (this.responseText == "true"){
                var cash = 0                                                                                                                                               //!!!!!!!!!!!!!!!!!!!!!!
                the_contract.giveRightToVote(json_payload.address, json_payload.pubkey.substring(1,2), "0x" + json_payload.pubkey.substring(2), cash)
            } else {
                Materialize.toast(klang.wrong_pkey, 4500, 'rounded')
                //return
            }
        })
        //Verifying if this address belongs to this user
        request.open('GET', "http://localhost:1985/queryCheckUser=" + json_payload.user + THE_AND + json_payload.address + THE_AND + (custom_provider ? custom_provider : "https://zak7n89d31.execute-api.us-west-2.amazonaws.com/prod"), true)
        request.send()
    }
}

//Update the file which contains all enodes in this campaign
function storeEnode(enode){
    if (!enode){
        enode = fullEnode()
    }

    var request2 = new XMLHttpRequest()
    request2.addEventListener("load", function() {
        var content_url = ""
        if (this.responseText == "empty"){
            content_url = enode
        } else {
            content_url = this.responseText + "," + enode
        }

        var request = new XMLHttpRequest()
        request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "enodes", true)
        request.send()
    })

    request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/enodes", true)
    request2.send()
}

//It gets enodes to send as value of --bootnodesv5
//For now, all enodes are returned
function setRandEnodes(){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        rand_enodes = this.responseText
    })

    request.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/enodes", true)
    request.send()
}


//Group chairpersons call
function preCommitVotes(){

}

function commitVotes(){
    //commitVotationStatistics
}

//It inserts candidates into blockchain
function insertCandidates(){
    if (insert_candidates_textarea.value && the_contract){
        var number_ballots = the_contract.howManyBallots().toNumber()
        if (number_ballots == 0){
            Materialize.toast(klang.must_create_ballot, 3000, 'rounded')
            clearAdminCampaign()
            return
        }

        var inserted = false
        var current_ballot = the_contract.currentBallot().toNumber()
        var candidates_text = insert_candidates_textarea.value
        var content_url = "{"
        var position = the_contract.howManyCandidatesInBallot(current_ballot).toNumber()
        for (i = 0; i < candidates_text.split("\n").length; i++) {
            var candidate_text = candidates_text.split("\n")[i]
            var items = candidate_text.split(";")
            //Simply ignore the wrong candidate insertions
            if (items.length != 4){
                continue
            }
            var ipfs = items[0]
            var name = items[1]
            var party = items[2]
            var photo = items[3]

            if (ipfs.length == 46 && name.length > 0 && party.length > 0 && photo.indexOf("http") == 0){
                content_url += "\"" + ipfs + "\":{\"name\":\"" + name + "\", \"party\":\"" + party + "\",\"photo\":\"" + photo + "\"},"
                //Call the contract to insert the candidate
                the_contract.addCandidateIntoBallot(current_ballot, position, fromIPFSToBytes32(ipfs))
                the_contract.iterateCandidatesCounter(current_ballot)
                position += 1

                inserted = true
            }
        }

        if (inserted){
            showPreloader(klang.wait_while_inserting_candidates)
            var request2 = new XMLHttpRequest()
            request2.addEventListener("load", function() {
                if (this.responseText.indexOf("{") == 0){
                    //Replacing the last '}' with ','
                    content_url = this.responseText.replace(/}([^}]*)$/,',$1') + content_url.substring(1)
                }
                content_url = content_url.substring(0, content_url.length - 1) + "}"
                content_url = content_url.replace(/\?/g, QUESTION_MARK)
                content_url = content_url.replace(/#/g, HASHTAG)
                content_url = content_url.replace(/"/g, DOUBLEQUOTE)
                content_url = content_url.replace(/'/g, QUOTE)

                var request = new XMLHttpRequest()
                request.addEventListener("load", function (ev) {
                    loadCandidates(current_campaign.ipns)
                    setTimeout(openCampaignPage, 1000)
                })
                request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "candidates_ballot" + current_ballot, true)
                request.send()
            })
            request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/candidates_ballot" + current_ballot, true)
            request2.send()
        } else {
            Materialize.toast(klang.error, 1500, 'rounded')
        }
    } else {
        Materialize.toast(klang.error, 1500, 'rounded')
    }
    clearAdminCampaign()
}

//It inserts parties into campaign's IPNS
function insertParties(){
    if (insert_parties_textarea.value){
        var parties_text = insert_parties_textarea.value
        var content_url = "{"
        for (i = 0; i < parties_text.split("\n").length; i++) {
            var party_text = parties_text.split("\n")[i]
            var items = party_text.split(";")
            //Simply ignore the wrong party insertions
            if (items.length != 4){
                continue
            }
            var ipfs = items[0]
            var name = items[1]
            var photo = items[2]
            var url = items[3]

            if (ipfs.length == 46 && name.length > 0 && url.length > 0 && photo.indexOf("http") == 0){
                content_url += "\"" + ipfs + "\":{\"name\":\"" + name + "\", \"url\":\"" + url + "\",\"photo\":\"" + photo + "\"},"
            }
        }
        showPreloader(klang.wait_while_inserting_parties)
        var request2 = new XMLHttpRequest()
        request2.addEventListener("load", function() {
            if (this.responseText.indexOf("{") == 0){
                //Replacing the last '}' with ','
                content_url = this.responseText.replace(/}([^}]*)$/,',$1') + content_url.substring(1)
            }
            content_url = content_url.substring(0, content_url.length - 1) + "}"
            content_url = content_url.replace(/\?/g, QUESTION_MARK)
            content_url = content_url.replace(/#/g, HASHTAG)
            content_url = content_url.replace(/"/g, DOUBLEQUOTE)
            content_url = content_url.replace(/'/g, QUOTE)

            var request = new XMLHttpRequest()
            request.addEventListener("load", function (ev) {
                loadParties(current_campaign.ipns)
                setTimeout(openCampaignPage, 1000)
            })
            request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "parties", true)
            request.send()
        })
        request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/parties", true)
        request2.send()
    } else {
        Materialize.toast(klang.error, 1500, 'rounded')
    }
    clearAdminCampaign()
}

//It inserts questions into campaign's IPNS
function insertQuestions(){
    if (insert_questions_textarea.value){
        var questions_text = insert_questions_textarea.value
        var content_url = "{"
        for (i = 0; i < questions_text.split("\n").length; i++) {
            var question_text = questions_text.split("\n")[i]
            var items = question_text.split(";")
            //Simply ignore the wrong party insertions
            if (items.length != 2){
                continue
            }
            var topic = items[0]
            var content = items[1]

            if (topic.length > 0 && topic.length <= 32 && content.length > 0){
                content_url += "\"" + i + "\":{\"content\":\"" + content + "\", \"topic\":\"" + topic + "\"},"
            }
        }

        showPreloader(klang.wait_while_inserting_questions)
        var request2 = new XMLHttpRequest()
        request2.addEventListener("load", function() {
            if (this.responseText.indexOf("{") == 0){
                //Replacing the last '}' with ','
                content_url = this.responseText.replace(/}([^}]*)$/,',$1') + content_url.substring(1)
            }
            content_url = content_url.substring(0, content_url.length - 1) + "}"
            content_url = content_url.replace(/\?/g, QUESTION_MARK)
            content_url = content_url.replace(/#/g, HASHTAG)
            content_url = content_url.replace(/"/g, DOUBLEQUOTE)
            content_url = content_url.replace(/'/g, QUOTE)

            var request = new XMLHttpRequest()
            request.addEventListener("load", function (ev) {
                loadQuestions(current_campaign.ipns)
                setTimeout(openCampaignPage, 1000)
            })
            request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "questions", true)
            request.send()
        })
        request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/questions", true)
        request2.send()
    } else {
        Materialize.toast(klang.error, 1500, 'rounded')
    }
    clearAdminCampaign()
}

//It inserts group categories into campaign's IPNS
function insertGroupCategories(){
    if (insert_group_categories_textarea.value){
        var gcs_text = insert_group_categories_textarea.value
        var content_url = "{"
        for (i = 0; i < gcs_text.split("\n").length; i++) {
            var gc_text = gcs_text.split("\n")[i]
            var items = gc_text.split(";")
            //Simply ignore the wrong party insertions
            if (items.length != 2){
                continue
            }
            var id = items[0]
            var content = items[1]

            if (id.length > 0 && id.length <= 32 && content.length > 0){
                content_url += "\"" + id + "\":{\"content\":\"" + content + "\"},"
            }
        }

        showPreloader(klang.wait_while_inserting_group_categories)
        var request2 = new XMLHttpRequest()
        request2.addEventListener("load", function() {
            if (this.responseText.indexOf("{") == 0){
                //Replacing the last '}' with ','
                content_url = this.responseText.replace(/}([^}]*)$/,',$1') + content_url.substring(1)
            }
            content_url = content_url.substring(0, content_url.length - 1) + "}"
            content_url = content_url.replace(/\?/g, QUESTION_MARK)
            content_url = content_url.replace(/#/g, HASHTAG)
            content_url = content_url.replace(/"/g, DOUBLEQUOTE)
            content_url = content_url.replace(/'/g, QUOTE)

            var request = new XMLHttpRequest()
            request.addEventListener("load", function (ev) {
                loadGroupCategories(current_campaign.ipns)
                setTimeout(openCampaignPage, 1000)
            })
            request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "group_categories", true)
            request.send()
        })
        request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/group_categories", true)
        request2.send()
    } else {
        Materialize.toast(klang.error, 1500, 'rounded')
    }
    clearAdminCampaign()
}

//Adding N groups into the blockchain
function createGroups(){
    var number_ballots = the_contract.howManyBallots().toNumber()
    if (number_ballots == 0){
        Materialize.toast(klang.must_create_ballot, 3000, 'rounded')
        clearAdminCampaign()
        return
    }

    var how_many = how_many_groups.value
    var chairperson = groups_chairperson.value
    var seconds = seconds_to_conclude_groups_creation.value
    var value = groups_value.value

    if (chairperson == ""){
        chairperson = web3.eth.coinbase
    }

    if (isNaN(how_many) || isNaN(seconds) || isNaN(value)){
        Materialize.toast(klang.insert_number_error, 2000, 'rounded')
        return
    }

    showPreloader(klang.wait_while_inserting_groups)

    //Chairpersons in this array can share theirs enodes on the campaign's IPFS
    if (!authorized_chairpersons.includes(chairperson)) {
        authorized_chairpersons.push(chairperson)
    }

    for (i=0; i < how_many; i++){
        the_contract.addGroup(chairperson)
    }
    setTimeout(defineValueNCategory, seconds * 1000) //This number will increase when many peers
}

//Loading groups file in order to obtain a json linking categories to groups
function loadGroups(){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0) {
            jsonGroups = JSON.parse(this.responseText)
        }
    })

    request.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/groups", true)
    request.send()
}

//It calls the functions that conclude the creation of the groups
function defineValueNCategory() {
    var json_groups = {}
    var request2 = new XMLHttpRequest()
    request2.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0){
            json_groups = JSON.parse(this.responseText)

            var category = group_categories_select.value
            var how_many_more = how_many_groups.value
            var how_many_now = the_contract.howManyGroups().toNumber()
            var value = groups_value.value

            for (i= (how_many_now - how_many_more); i < how_many_now; i++){
                the_contract.defineGroupCategory(i, web3.fromAscii(category))
                the_contract.defineGroupValue(i, value)
                if (json_groups[category]){
                    json_groups[category] += i + ","
                } else {
                    json_groups[category] = i + ","
                }
            }

            content_url = JSON.stringify(json_groups)
            content_url = content_url.replace(/\?/g, QUESTION_MARK)
            content_url = content_url.replace(/#/g, HASHTAG)
            content_url = content_url.replace(/"/g, DOUBLEQUOTE)
            content_url = content_url.replace(/'/g, QUOTE)

            var request = new XMLHttpRequest()
            request.addEventListener("load", function (ev) {
                setTimeout(openCampaignPage, 1000)
            })
            request.open('GET', "http://localhost:1985/queryAddProfile=" + current_campaign.id + THE_AND + content_url + THE_AND + "groups", true)
            request.send()
        }
        clearAdminCampaign()
    })
    request2.addEventListener("error", function() {
        Materialize.toast(klang.error, 3000, 'rounded')
        clearAdminCampaign()
    })

    request2.open('GET', "http://localhost:8080/ipns/" + current_campaign.ipns + "/groups", true)
    request2.send()
}

//Read vote message and then send the vote to blockchain
//Payload is composed of ballot, candidate, first_number, group, vote (VOTE + ":" + campaign id + ":" + ballot), and signature(vote)
function readVoteMessage(payload){
    var json_payload = JSON.parse(payload)
    var vote = web3.toAscii(the_contract.currentVoteMessage())
    var pubkeys = makePubkeys(the_contract.getGroupPubkeys(json_payload.group))

    //Arguments of "roda": verify-text, sign-text, keyring, keypair, signature, blind
    var response = urs.roda(vote, "", pubkeys, "", json_payload.signature, false)
    if (response == "true"){
        //Search for an empty f_number, in order to determine the vote position
        var fnumbers = the_contract.getVotes(json_payload.ballot,json_payload.group)[0]
        var length = the_contract.mgz().toNumber()
        var position = -1
        for (i = 0; i < length; i++){
            if (fnumbers[i] == "0x0000000000000000000000000000000000000000000000000000000000000000"){
                position = i
                break
            }
        }

        if (position >= 0 && position < length){
            json_payload.position = received_votes.length
            received_votes.push(json_payload)
        }
    }
}

//Send the votes to the blockchain, which will be inserted if the "wallet.address" was set as the group chairperson
function sendVotes(){
    received_votes.sort()
    received_votes.forEach(function (json_payload) {
        the_contract.vote(json_payload.ballot, json_payload.group, json_payload.position, fromFirstNumberToBytes32(json_payload.first_number), json_payload.candidate)
    })
    received_votes = []
}

function sendVoteMessage(candidate){
    var group = the_contract.getVoter(web3.eth.coinbase)[2].toNumber()
    var current_ballot = the_contract.currentBallot().toNumber()
    var vote = web3.toAscii(the_contract.currentVoteMessage())
    var pubkeys = makePubkeys(the_contract.getGroupPubkeys(group))
    var keypair = sessionStorage.getItem("kantcoin_org_key")

    //Discovering the whisper address to send the message
    var group_chairperson = the_contract.groups(group)[0]

    if (group_chairperson == "0x"){
        return
    }
    var whisper_3parts = the_contract.getWhisper(group_chairperson)
    var whisper_address = whisper_3parts[0] + whisper_3parts[1].substring(2) + whisper_3parts[2].substring(2,4)

    //Arguments of "roda": verify-text, sign-text, keyring, keypair, signature, blind
    var signature = urs.roda("", vote, pubkeys, keypair, "", false)
    var first_number = signature.substring(0,45)

    var payload_json = {ballot: current_ballot, group: group, candidate: candidate, signature: signature, first_number: first_number, campaign:current_campaign.id}
    var payload = JSON.stringify(payload_json)
    sendWhisperMessage(VOTE, payload, whisper_address)

    localStorage.setItem("kantcoin_org_vote", JSON.stringify(payload_json))
}

//Gather the public keys in the format to run URS
function makePubkeys(pubkeys_array){
    var result = "{"
    for (i = 0, j = 0; i < pubkeys_array[0].length; i++) {
        if (pubkeys_array[0][i] && pubkeys_array[1][i] != "0x0000000000000000000000000000000000000000000000000000000000000000"){
            result += "\"" + j + "\":\"" + "0" + pubkeys_array[0][i].toNumber() + pubkeys_array[1][i].substring(2) + "\","
            j++
        }
    }
    result = result.substring(0, result.length - 1) + "}"
    return result
}


//Prepare the payload and then send a whisper message
function sendRegisterUserMessage(){
    var user = sessionStorage.getItem("kantcoin_org_user")
    var key = JSON.parse(sessionStorage.getItem("kantcoin_org_key"))

    if (!user || !wallet.address){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')
        return
    }
    if (!current_campaign.id){
        Materialize.toast(klang.no_campaign_opened, 3000, 'rounded')
        return
    }

    //To prove the origin of the message
    var aux_wallet = new ethers.Wallet(wallet.privateKey)
    var signature = aux_wallet.signMessage(current_campaign.id)
    var payload_json = {user: user, address: wallet.address, pubkey: key.pubkey, signature: signature}
    var payload = JSON.stringify(payload_json)

    sendWhisperMessage(REGISTER_VOTER, payload, current_campaign.whisper)
}

//To store the enode of a group chairperson
function sendStoreEnodeMessage(){
    var user = sessionStorage.getItem("kantcoin_org_user")
    var key = JSON.parse(sessionStorage.getItem("kantcoin_org_key"))

    if (!user || !wallet.address){
        Materialize.toast(klang.no_vault_opened, 3000, 'rounded')
        return
    }
    if (!current_campaign.id){
        Materialize.toast(klang.no_campaign_opened, 3000, 'rounded')
        return
    }

    //To prove the origin of the message
    var aux_wallet = new ethers.Wallet(wallet.privateKey)
    var signature = aux_wallet.signMessage(current_campaign.id)
    var payload_json = {address: wallet.address, enode: fullEnode(), signature: signature}
    var payload = JSON.stringify(payload_json)

    sendWhisperMessage(STORE_ENODE, payload, current_campaign.whisper)
}

//Send a anonymous message to a whisper contact
//Topic has only 4 bytes
function sendWhisperMessage(topic, payload, pubKey){
    web3.shh.post({
        pubKey : pubKey,
        topic:  web3.fromAscii(topic),
        payload: web3.fromAscii(payload),
        ttl: 300, //5 minutes
        powTime: 50,
        powTarget: 20
    })
}

//It sets the variable the_contract
function setTheContract(){
    if (web3.eth && current_campaign.contract){
        var ABI = CAMPAIGN_CONTRACT
        var generic_contract = web3.eth.contract(ABI)
        the_contract = generic_contract.at(current_campaign.contract)
        //In order to execute the contract methods, we need to set the default account
        web3.eth.defaultAccount = web3.eth.coinbase
    }
}

//Every user can insert its whisper address and receive messages
function addWhisperAddressIntoBlockchain(){
    var id = web3.shh.addPrivateKey(wallet.privateKey)
    var whisper_address = web3.shh.getPublicKey(id)
    the_contract.defineWhisper(web3.eth.coinbase, whisper_address.substring(0,66), "0x" + whisper_address.substring(66,130), "0x" + whisper_address.substring(130))
}

//Getting user's ip in order to figure out the enode
//We have to obtain it via third party services
function whatIsMyIp(){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("{") == 0) {
            jsonResponse = JSON.parse(this.responseText)
            ip = jsonResponse.ip
        }
    })

    request.open('GET', "http://localhost:1985/queryMyIP=", true)
    request.send()
}

//Getting user's ip in order to figure out the enode
//We have to obtain it via third party services
function whatIsMyEnode(){
    var request = new XMLHttpRequest()
    request.addEventListener("load", function() {
        if (this.responseText.indexOf("enode://") == 0) {
            enode_without_ip = this.responseText
        }
    })

    request.open('GET', "http://localhost:1985/queryEnode=", true)
    request.send()
}

//Click the menu item to go to the profile page
function myAccountMenuItemClick(){
    $("#my_account_menu_item").click()
}

//Clean the input fields
function clearCreateCampaignFields(){
    campaign_name_input.value = ""
    campaign_description_input.value = ""
    other_campaigns_community_input.value = ""
    other_campaigns_community_input.className = other_campaigns_community_input.className.replace("invalid","").replace("valid","")
    image_input.value = ""
    image_input.className = image_input.className.replace("invalid","").replace("valid","")
    campaign_external_page_input.value = ""
    campaign_external_page_input.className = campaign_external_page_input.className.replace("invalid","").replace("valid","")
    final_date_input.value = ""
    initial_date_input.value = ""
    prefix_voters_input.value = ""
    regexp_input.value = ""
    accepted_donation_values.value = ""
    validation_ipns1.value = ""
    validation_ipns2.value = ""
}

//Clean the input fields
function clearAdminCampaign(){
    insert_candidates_textarea.value = ""
    insert_parties_textarea.value = ""
    insert_questions_textarea.value = ""
    insert_group_categories_textarea.value = ""
    create_round_id.value = ""
    how_many_groups.value = ""
    groups_value.value = ""
    groups_chairperson.value = ""
    seconds_to_conclude_groups_creation.value = ""
}

//To store ipfs addresses into the blockchain
function fromIPFSToBytes32(ipfs){
    var bytearray = bs58.decode(ipfs)
    var hex_string = toHexString(bytearray)
    return "0x" + hex_string.substring(4)
}

//Obtaining the IPFS address from the stored byte32 value
function fromBytes32ToIPFS(bytes32){
    bytes32 = bytes32.replace("0x","")
    var bytes = Buffer.from('1220' + bytes32, 'hex')
    return bs58.encode(bytes)
}

//To store ipfs addresses into the blockchain
function fromFirstNumberToBytes32(number){
    var bytearray = bs58.decode(number.substring(1))
    var hex_string = toHexString(bytearray)
    return "0x" + hex_string
}

//To store whisper addresses into the blockchain
function fromWhisperHexToBase58(whisper_hex){
    whisper_hex = whisper_hex.replace("0x","")
    var bytes = Buffer.from(whisper_hex, 'hex')
    return bs58.encode(bytes)
}

function fromBase58ToWhisperHex(base58_text){
    var bytearray = bs58.decode(base58_text)
    var hex_string = toHexString(bytearray)
    return "0x" + hex_string
}

//Convert a byte array in a hex string
function toHexString(byteArray) {
    return Array.from(byteArray, function(byte) {
        return ('0' + (byte & 0xFF).toString(16)).slice(-2)
    }).join('')
}

//Split a string into chunks of the given size
function splitString (string, size) {
    var re = new RegExp('.{1,' + size + '}', 'g')
    return string.match(re)
}

//Returns the enode ready to be used
function fullEnode() {
    return enode_without_ip.replace("[::]", ip)
}